<<<<<<< HEAD
#Read in our data data
df <- read.csv("GlobalFicrSocNet.csv", sep = ",", header=TRUE, check.names = F)
#Replace NAs with 0
df[is.na(df)] <- 0
df <- read.csv("IthacaWeatherData1989-2020.csv", h=TRUE)
library(tidyverse)
library(tidyverse)
library(dplyr)
library(zoo)
View(df)
df <- read.csv("IthacaWeatherData1989-2020.csv", h=TRUE)
df <- df %>%
rename(MaxTemp=MaxTemperature,MinTemp=MinTemperature,Precip=Precipitation)
select(Date,HatchDateJulYear,MaxTemp,MinTemp,Precip,HDD,CDD,GDD)
df <- df %>%
rename(MaxTemp=MaxTemperature,MinTemp=MinTemperature,Precip=Precipitation),
df <- df %>%
rename(MaxTemp=MaxTemperature,MinTemp=MinTemperature,Precip=Precipitation) %>%
select(Date,HatchDateJulYear,MaxTemp,MinTemp,Precip,HDD,CDD,GDD)
df <- read.csv("IthacaWeatherData1989-2020.csv", h=TRUE)
df <- df %>%
rename(MaxTemp=MaxTemperature,MinTemp=MinTemperature,Precip=Precipitation) %>%
select(Date,HatchDateJulYear,MaxTemp,MinTemp,Precip,HDD,CDD,GDD)
#coerce climate variables to class numeric, NAs introduced where missing data were coded as characters
df$MaxTemp <- as.numeric(df$MaxTemp)
df$MinTemp <- as.numeric(df$MinTemp)
df$Precip <- as.numeric(df$Precip)
df$HDD <- as.numeric(df$HDD)
df$CDD <- as.numeric(df$CDD)
df$GDD <- as.numeric(df$GDD)
f2c <- function(x){
x <- (5/9) * (x-32)
return(x)
}
f2c(42)#first MaxTemp = 5.555C
df$MaxTempC <- mapply(f2c, df$MaxTemp)
df$MinTempC <- mapply(f2c, df$MinTemp)
in2cm <- function(x){
x <- x * 2.54
return(x)
}
in2cm(0.07)#first precip amount = 0.1778 cm
df$PrecipCM <- mapply(in2cm, df$Precip)
df <- df %>%
select(Date,HatchDateJulYear,MaxTempC,MinTempC,
PrecipCM,HDD,CDD,GDD)
#zoo::rollapply(): align = 'left' applies to the succeeding days, while align = 'right' applies to the preceding days
?zoo::rollapply()
#An 11-day rolling window calculates the mean of MaxTemp for the next 11 days
df$MaxTempMean1_11 <- zoo::rollapply(df$MaxTempC, width=11, FUN=mean, align = 'left', fill = NA, partial = TRUE, na.rm = TRUE)
#Code check
c(mean=mean(df[1:11,7]),metric=df[1,16])
#Code check
c(mean=mean(df[1:11,7]),metric=df[1,16])
View(df)
View(df)
#Code check
c(mean=mean(df[1:11,3]),metric=df[1,9])
#MaxTempMean for days 12-22
df$MaxTempMean12_22 <- dplyr::lead(df$MaxTempMean1_11, n = 11)
#Code check
c(mean=mean(df[12:22,3]), metric=df[1,10])#mean() calculation should match metric
print(df[12:22,7])#11 values
print(df[12:22,3])#11 values
#MaxTemp mean for 19 days prior to hatch date
df$MeanMaxTempIncubation <- zoo::rollapply(df$MaxTempC, width=19, FUN=mean, align = 'right', fill = NA, partial = TRUE, na.rm = TRUE)
#Code check
c(mean=mean(df[1:19,3]), metric=df[19,11]) #mean() calculation should match metric
print(df[1:19,3])#19 values
#An 11-day rolling window calculates the mean of MinTemp for the next 11 days
df$MinTempMean1_11 <- zoo::rollapply(df$MinTempC, width=11, FUN=mean, align = 'left', fill = NA, partial = TRUE, na.rm = TRUE)
#Code check
c(mean=mean(df[1:11,4]),metric=df[1,12])
#MaxTempMean for days 12-22
df$MinTempMean12_22 <- dplyr::lead(df$MinTempMean1_11, n = 11)
#Code check
c(mean=mean(df[12:22,4]), metric=df[1,13])#mean() calculation should match metric
#MaxTemp mean for 19 days prior to hatch date
df$MeanMinTempIncubation <- zoo::rollapply(df$MinTempC, width=19, FUN=mean, align = 'right', fill = NA, partial = TRUE, na.rm = TRUE)
#Code check
c(mean=mean(df[1:19,4]), metric=df[19,14]) #mean() calculation should match metric
df$PrecipSum1_11 <- zoo::rollapply(df$PrecipCM, width=11, FUN=sum, align = 'left', fill = NA, partial = TRUE, na.rm = TRUE)
#Code check
c(sum=sum(df[1:11,5], na.rm = TRUE), metric=df[1,15]) #sum() calculation should match metric
#PrecipSum column that is 11 days ahead
df$PrecipSum12_22 <- dplyr::lead(df$PrecipSum1_11, n = 11)
#Code check
c(sum=sum(df[12:22,5], na.rm = TRUE), metric=df[1,16]) #sum() calculation should match metric
=======
=======
>>>>>>> e71a7dcc4a760bde4c90604e7f49aca36a46b687
<<<<<<< HEAD
=======
countNAs#still 3 NAs in name for nestlings named "NA"
#Change "NA" name to "N_A" so R doesn't cause problems
df <- df %>%
mutate(Name = coalesce(Name, "N_A"))
#filter out Weights < 160
df <- df %>% filter(Weight > 160)#new n=2313
range(df$Weight)
#filter between 24 and 30 days CalcAges
df <- df %>% filter(between(CalcAge, 24,30))#new n=2035
range(df$CalcAge)
#resort df
df <- df %>% arrange(Year,NestName,ID)
View(df)
Exp <- c(257,200,216,242,224,267,250,236,199,235)
PC <- c(201,196,227,218,231,231,180,225,272,194)
t.test(PC,Exp)
var(Exp)
#Experimental
Exp <- c(257,200,216,242,224,267,250,236,199,235)
#Positive control
PC <- c(201,196,227,218,231,231,180,225,272,194)
#t test
t.test(PC,Exp)
library(tidyverse)
library(dplyr)
library(broom) #tidy() to create tibbles from model summaries
library(car) #vif
library(cowplot)
library(lme4) #frequentist models
library(sjPlot) #plot_model & tab_model (blue = #377EB8)
library(ggpubr) #ggarrange
library(glmmTMB) #zi & overdispersed models
library(lmerTest) #lmerTest::step
library(ggeffects) #ggpredict
#PACKAGES FOR BAYESIAN MODELS
library(rstanarm) #stan models
library(shinystan) #stan model evaluation
#launch_shinystan_demo()
library(loo) #use loo() to compare fits between bayesian models
library(plotly)
library(MuMIn) #dredge() for unsupervised model selection
library(AICcmodavg) #aictab() for AICc model comparisons
library(DHARMa)
library(DescTools)
library(umap)
library(tsne)
theme_set(theme_classic())
df <- read.csv("CrowNestlingClimate_AllNestlingsCleaned&ClimateJoined.csv", h=TRUE)
df <- df[,-1]
View(df)
summary(df)
df$YearBins <- cut(df$Year, breaks = c(1995,2000,2005,2010,2015), labels = c("1989-1995","1996-2000","2001-2005","2006-2010","2011-2018"))
df$YearBins <- cut(df$Year, breaks = c(1989,1995,2000,2005,2010,2015), labels = c("1989-1995","1996-2000","2001-2005","2006-2010","2011-2018"))
df$YearBins <- cut(df$Year, breaks = c(1988,1995,2000,2005,2010,2015), labels = c("1989-1995","1996-2000","2001-2005","2006-2010","2011-2018"))
df$YearBins <- cut(df$Year, breaks = c(1988,1995,2000,2005,2010,2015), labels = c("89-95","96-00","01-05","06-10","11-18"))
df <- df %>% relocate(YearBins, .before = Year)
#variables that don't get scaled
DataNotScaled.df <- df[,1:11]
#Numerical data that do get scaled
DataToScale.df <- df[,12:40]
#Scale those data
scale.df <- scale(DataToScale.df)
scaledWeather.df <- scale.df[,12:29]
scaledMaxTPrecip.df <- scale.df[,c(12:14,18:20)]
#Rejoin with variables that don't get scaled
scaled.df <- cbind(DataNotScaled.df,scale.df)
View(scaled.df)
?plot_model()
F.UB.inter.plot <- plot_model(F.UB2.mdl, type = "int", mdrt.values = "meansd")
library(tidyverse)
library(dplyr)
library(broom) #tidy() to create tibbles from model summaries
library(car) #vif
library(cowplot)
library(lme4) #frequentist models
library(sjPlot) #plot_model & tab_model (blue = #377EB8)
library(ggpubr) #ggarrange
library(glmmTMB) #zi & overdispersed models
library(lmerTest) #lmerTest::step
library(ggeffects) #ggpredict
#PACKAGES FOR BAYESIAN MODELS
# library(rstanarm) #stan models
# library(shinystan) #stan model evaluation
#launch_shinystan_demo()
# library(loo) #use loo() to compare fits between bayesian models
library(plotly)
library(MuMIn) #dredge() for unsupervised model selection
library(AICcmodavg) #aictab() for AICc model comparisons
library(DHARMa)
theme_set(theme_classic())
forest.plot <- function(df){
mdl.df <- tidy(mdl, quick = FALSE)
ci <- as_tibble(confint(mdl))
mdl.df$ci.lower <- ci$`2.5 %`
mdl.df$ci.upper <- ci$`97.5 %`
mdl.df <- mdl.df[-1,]
ggplot(data = mdl.df)+
geom_pointrange(aes(x=term, y=estimate, ymin=ci.lower, ymax=ci.upper), size=1, shape=20)+
coord_flip()+
geom_hline(yintercept = 0, color="red",size=1)+
ggtitle("Parameter estimates")+
theme(plot.title = element_text(size = 22),
axis.text.x = element_text(size = 18),
axis.title.x = element_blank(),
axis.text.y = element_text(size = 18),
axis.title.y = element_blank(),
plot.margin = margin(15,15,15,15))
}
mdl.tbl <- function(mdl){
mdl.df <- tidy(mdl, quick = FALSE)
ci <- as_tibble(confint(mdl))
mdl.df$ci.lower <- ci$`2.5 %`
mdl.df$ci.upper <- ci$`97.5 %`
mdl.df <- mdl.df[-1,]
print(mdl.df)
}
# addline_format <- function(x,...){
#   gsub('\\s','\n',x)
# }
#Both sexes
B.df <- read.csv("CrowNestlingClimate_BothSexesClean.csv",h=TRUE)
B.df$AllSex <- as.factor(B.df$AllSex)
summary(B.df)
B.factors.df <- B.df[,1:5]
B.scaled.df <- scale(B.df[,6:27])
B.scaled.df <- cbind(B.factors.df,B.scaled.df)
#Males
M.df <- subset(B.df, AllSex=="M")
M.scaled.df <- subset(B.scaled.df, AllSex=="M")
#Females
F.df <- subset(B.df, AllSex=="F")
F.scaled.df <- subset(B.scaled.df, AllSex=="F")
# Upper bill GDD model
F.UB2.mdl <- lm(UB ~ GDDSum12_22*PrecipSum12_22 + Weight, data = F.df)
summary(F.UB2.mdl)
F.scaled.UB2.mdl <- lm(UB ~ GDDSum12_22*PrecipSum12_22 + Weight, data = F.scaled.df)
summary(F.scaled.UB2.mdl)
?plot_model()
F.UB.inter.plot <- plot_model(F.UB2.mdl, type = "int", mdrt.values = "meansd")
F.UB.inter.plot +
scale_fill_discrete()
F.UB.inter.plot <- F.UB.inter.plot +
scale_color_discrete(name="Precip Levels", labels=c("Low","Mean", "High"))+
ylab("Upper Bill")+
xlab("GDD")+
theme(plot.title = element_blank(),
axis.text.x = element_text(size = 12),
axis.title.x = element_text(size = 14),
axis.text.y = element_text(size = 12),
axis.title.y = element_text(size = 14),
legend.position = "top",
plot.margin = margin(15,15,15,15))
F.UB.inter.plot
meanUB <- mean(df$UB)
F.UB.inter.plot <- F.UB.inter.plot +
scale_color_discrete(name="Precip Levels", labels=c("Low","Mean", "High"))+
ylab("Upper Bill")+
xlab("GDD")+
geom_hline(yintercept = meanUB)+
theme(plot.title = element_blank(),
axis.text.x = element_text(size = 12),
axis.title.x = element_text(size = 14),
axis.text.y = element_text(size = 12),
axis.title.y = element_text(size = 14),
legend.position = "top",
plot.margin = margin(15,15,15,15))
F.UB.inter.plot
View(df)
?plot_model()
"minmax"
(default) minimum and maximum values (lower and upper bounds) of the moderator are used to plot the interaction between independent variable and moderator(s).
F.UB.inter.plot <- plot_model(F.UB2.mdl, type = "int", mdrt.values = "meansd")
"minmax"
(default) minimum and maximum values (lower and upper bounds) of the moderator are used to plot the interaction between independent variable and moderator(s).
F.UB.inter.plot +
scale_fill_discrete()
min(df$PrecipSum12_22)
View(df)
F.UB.inter.plot <- plot_model(F.UB2.mdl, type = "int", mdrt.values = "quart")
F.UB.inter.plot +
scale_fill_discrete()
medianUB <- median(df$UB)
F.UB.inter.plot <- F.UB.inter.plot +
scale_color_discrete(name="Precip Levels", labels=c("Low","Mean", "High"))+
ylab("Upper Bill")+
xlab("GDD")+
geom_hline(yintercept = meanUB)+
theme(plot.title = element_blank(),
axis.text.x = element_text(size = 12),
axis.title.x = element_text(size = 14),
axis.text.y = element_text(size = 12),
axis.title.y = element_text(size = 14),
legend.position = "top",
plot.margin = margin(15,15,15,15))
F.UB.inter.plot
modeUB <- mode(df$UB)
summary(F.UB2.mdl)
#Scale those data
?scale()
meanUB <- mean(df$UB)
F.UB.inter.plot <- F.UB.inter.plot +
scale_color_discrete(name="Precip Levels", labels=c("Low","Mean", "High"))+
ylab("Upper Bill")+
xlab("GDD")+
geom_hline(yintercept = meanUB, linetype ="dashed", size = 1)+
theme(plot.title = element_blank(),
axis.text.x = element_text(size = 12),
axis.title.x = element_text(size = 14),
axis.text.y = element_text(size = 12),
axis.title.y = element_text(size = 14),
legend.position = "top",
plot.margin = margin(15,15,15,15))
F.UB.inter.plot
F.UB.inter.plot <- F.UB.inter.plot +
scale_color_discrete(name="Precip Levels", labels=c("Low","Mean", "High"))+
ylab("Upper Bill")+
xlab("GDD")+
geom_hline(yintercept = meanUB, linetype ="dashed", size = 1)+
theme(plot.title = element_blank(),
axis.text.x = element_text(size = 12),
axis.title.x = element_text(size = 14),
axis.text.y = element_text(size = 12),
axis.title.y = element_text(size = 14),
legend.position = "top",
plot.margin = margin(15,15,15,15))
F.UB.inter.plot
F.UB.inter.plot <- F.UB.inter.plot +
scale_color_discrete(name="Precip Levels", labels=c("Low","Mean", "High"))+
ylab("Upper Bill")+
xlab("GDD")+
geom_hline(yintercept = meanUB, linetype ="dotted", size = 1)+
theme(plot.title = element_blank(),
axis.text.x = element_text(size = 12),
axis.title.x = element_text(size = 14),
axis.text.y = element_text(size = 12),
axis.title.y = element_text(size = 14),
legend.position = "top",
plot.margin = margin(15,15,15,15))
F.UB.inter.plot
remove(F.UB.inter.plot)
F.UB.inter.plot <- plot_model(F.UB2.mdl, type = "int", mdrt.values = "quart")
F.UB.inter.plot +
scale_fill_discrete()
F.UB.inter.plot <- plot_model(F.UB2.mdl, type = "int", mdrt.values = "all")
F.UB.inter.plot +
scale_fill_discrete()
F.scaled.UB2.mdl <- lm(UB ~ GDDSum12_22*PrecipSum12_22 + Weight, data = F.scaled.df)
F.scaled.UB2.mdl <- lm(UB ~ GDDSum12_22*PrecipSum12_22 + Weight, data = F.scaled.df)
F.UB.inter.plot <- plot_model(F.scaled.UB2.mdl, type = "int", mdrt.values = "all")
F.UB.inter.plot +
scale_fill_discrete()
F.UB.inter.plot <- plot_model(F.scaled.UB2.mdl, type = "int", mdrt.values = "quart")
F.UB.inter.plot +
scale_fill_discrete()
meanUB <- mean(df$UB)
F.UB.inter.plot <- F.UB.inter.plot +
scale_color_discrete(name="Precip Levels", labels=c("25th Quartile","Median", "75th Quartile"))+
ylab("Upper Bill")+
xlab("GDD")+
geom_hline(yintercept = meanUB, linetype ="dotted", size = 1)+
theme(plot.title = element_blank(),
axis.text.x = element_text(size = 12),
axis.title.x = element_text(size = 14),
axis.text.y = element_text(size = 12),
axis.title.y = element_text(size = 14),
legend.position = "top",
plot.margin = margin(15,15,15,15))
F.UB.inter.plot
#cowplot::save_plot("F.UB.inter.plot.png", F.UB.inter.plot)
meanUB <- mean(scaled.df$UB)
F.UB.inter.plot <- F.UB.inter.plot +
scale_color_discrete(name="Precip Levels", labels=c("25th Quartile","Median", "75th Quartile"))+
ylab("Upper Bill")+
xlab("GDD")+
geom_hline(yintercept = meanUB, linetype ="dotted", size = 1)+
theme(plot.title = element_blank(),
axis.text.x = element_text(size = 12),
axis.title.x = element_text(size = 14),
axis.text.y = element_text(size = 12),
axis.title.y = element_text(size = 14),
legend.position = "top",
plot.margin = margin(15,15,15,15))
F.UB.inter.plot
remove(F.UB.inter.plot)
F.UB.inter.plot <- plot_model(F.scaled.UB2.mdl, type = "int", mdrt.values = "quart")
F.UB.inter.plot +
scale_fill_discrete()
meanUB <- mean(scaled.df$UB)
F.UB.inter.plot <- F.UB.inter.plot +
scale_color_discrete(name="Precip Levels", labels=c("25th Quartile","Median", "75th Quartile"))+
ylab("Upper Bill")+
xlab("GDD")+
geom_hline(yintercept = meanUB, linetype ="dotted", size = 1)+
theme(plot.title = element_blank(),
axis.text.x = element_text(size = 12),
axis.title.x = element_text(size = 14),
axis.text.y = element_text(size = 12),
axis.title.y = element_text(size = 14),
legend.position = "top",
plot.margin = margin(15,15,15,15))
F.UB.inter.plot
remove(F.UB.inter.plot)
F.UB.inter.plot <- plot_model(F.UB2.mdl, type = "int", mdrt.values = "quart")
F.UB.inter.plot +
scale_fill_discrete()
meanUB <- mean(df$UB)
F.UB.inter.plot <- F.UB.inter.plot +
scale_color_discrete(name="Precip Levels", labels=c("25th Quartile","Median", "75th Quartile"))+
ylab("Upper Bill")+
xlab("GDD")+
geom_hline(yintercept = meanUB, linetype ="dotted", size = 1)+
theme(plot.title = element_blank(),
axis.text.x = element_text(size = 12),
axis.title.x = element_text(size = 14),
axis.text.y = element_text(size = 12),
axis.title.y = element_text(size = 14),
legend.position = "top",
plot.margin = margin(15,15,15,15))
F.UB.inter.plot
Entropy(as.matrix(rep(1/8, 8)))
# http://r.789695.n4.nabble.com/entropy-package-how-to-compute-mutual-information-td4385339.html
x <- as.factor(c("a","b","a","c","b","c"))
y <- as.factor(c("b","a","a","c","c","b"))
Entropy(table(x), base=exp(1))
Entropy(table(y), base=exp(1))
Entropy(x, y, base=exp(1))
MutInf(x, y, base=exp(1))
Entropy(table(x)) + Entropy(table(y)) - Entropy(x, y)
MutInf(x, y, base=2)
>>>>>>> 2b313633ef171432d810516a1ac77e16d247c575
library(tidyverse)
library(dplyr)
library(broom) #tidy() to create tibbles from model summaries
library(car) #vif
library(cowplot)
library(lme4) #frequentist models
library(sjPlot) #plot_model & tab_model (blue = #377EB8)
library(ggpubr) #ggarrange
library(glmmTMB) #zi & overdispersed models
library(lmerTest) #lmerTest::step
library(ggeffects) #ggpredict
#PACKAGES FOR BAYESIAN MODELS
library(rstanarm) #stan models
library(shinystan) #stan model evaluation
#launch_shinystan_demo()
<<<<<<< HEAD
# library(loo) #use loo() to compare fits between bayesian models
library(plotly)
library(MuMIn) #dredge() for unsupervised model selection
library(AICcmodavg) #aictab() for AICc model comparisons
library(DHARMa)
theme_set(theme_classic())
#Both sexes
B.df <- read.csv("CrowNestlingClimate_BothSexesClean.csv",h=TRUE)
B.df$AllSex <- as.factor(B.df$AllSex)
summary(B.df)
B.df$BDbyWeight <- B.df$BillDepth/B.df$Weight
B.df$UBbyWeight <- B.df$UB/B.df$Weight
B.df$UBSbyWeight <- B.df$UBS/B.df$Weight
B.df$TBSbyWeight <- B.df$TBS/B.df$Weight
B.df$TarsusbyWeight <- B.df$Tarsus/B.df$Weight
?scale()
B.factors.df <- B.df[,1:5]
B.scaled.df <- scale(B.df[,6:32])
B.scaled.df <- cbind(B.factors.df,B.scaled.df)
#Males
M.df <- subset(B.df, AllSex=="M")
M.scaled.df <- subset(B.scaled.df, AllSex=="M")
#Females
F.df <- subset(B.df, AllSex=="F")
F.scaled.df <- subset(B.scaled.df, AllSex=="F")
BDResids <- lm(data = B.scaled.df, BillDepth ~ Weight + CalcAge)
BDResids.mdl <- lm(data = B.scaled.df, BillDepth ~ Weight + CalcAge)
B.scaled.df$BDResids <- BDResids.mdl$residuals
hist(BDResids)
hist(B.scaled.df$BDResids)
ggplot(data = B.scaled.df, aes(x=BDResids))+
geom_histogram()
ggplot(data = B.scaled.df, aes(x=BDResids, color = AllSex))+
geom_histogram()
ggplot(data = B.scaled.df, aes(x=BDResids, fill = AllSex))+
geom_histogram()+
scale_fill_manual(values = c("#009E73","#E69F00"), labels = c("Female","Male"))
t.test(B.scaled.df$BDResids[B.scaled.df$AllSex=="M"],B.scaled.df$BDResids[B.scaled.df$AllSex=="F"])
UBSResids.mdl <- lm(data = B.scaled.df, UBS ~ Weight + CalcAge)
B.scaled.df$UBSResids <- UBSResids.mdl$residuals
ggplot(data = B.scaled.df, aes(x=UBSResids, fill = AllSex))+
geom_histogram()+
scale_fill_manual(values = c("#009E73","#E69F00"), labels = c("Female","Male"))
t.test(B.scaled.df$UBSResids[B.scaled.df$AllSex=="M"],B.scaled.df$UBSResids[B.scaled.df$AllSex=="F"])
BDResidsSex.mdl <- lm(data = B.scaled.df, BillDepth ~ Weight + CalcAge + AllSex)
library(tidyverse)
library(dplyr)
library(broom) #tidy() to create tibbles from model summaries
library(car) #vif
library(cowplot)
library(lme4) #frequentist models
library(sjPlot) #plot_model & tab_model (blue = #377EB8)
library(ggpubr) #ggarrange
library(glmmTMB) #zi & overdispersed models
library(lmerTest) #lmerTest::step
library(ggeffects) #ggpredict
#PACKAGES FOR BAYESIAN MODELS
# library(rstanarm) #stan models
# library(shinystan) #stan model evaluation
#launch_shinystan_demo()
# library(loo) #use loo() to compare fits between bayesian models
library(plotly)
library(MuMIn) #dredge() for unsupervised model selection
library(AICcmodavg) #aictab() for AICc model comparisons
library(DHARMa)
theme_set(theme_classic())
#Both sexes
B.df <- read.csv("CrowNestlingClimate_BothSexesClean.csv",h=TRUE)
B.df$AllSex <- as.factor(B.df$AllSex)
summary(B.df)
B.df$BDbyWeight <- B.df$BillDepth/B.df$Weight
B.df$UBbyWeight <- B.df$UB/B.df$Weight
B.df$UBSbyWeight <- B.df$UBS/B.df$Weight
B.df$TBSbyWeight <- B.df$TBS/B.df$Weight
B.df$TarsusbyWeight <- B.df$Tarsus/B.df$Weight
?scale()
B.factors.df <- B.df[,1:5]
B.scaled.df <- scale(B.df[,6:32])
B.scaled.df <- cbind(B.factors.df,B.scaled.df)
#Males
M.df <- subset(B.df, AllSex=="M")
M.scaled.df <- subset(B.scaled.df, AllSex=="M")
#Females
F.df <- subset(B.df, AllSex=="F")
F.scaled.df <- subset(B.scaled.df, AllSex=="F")
t.test(B.df$Weight[B.df$AllSex=="M"], B.df$Weight[B.df$AllSex=="F"])
t.test(B.df$UBSbyWeight[B.df$AllSex=="M"],B.df$UBSbyWeight[B.df$AllSex=="F"])
t.test(B.scaled.df$UBSbyWeight[B.scaled.df$AllSex=="M"],B.scaled.df$UBSbyWeight[B.scaled.df$AllSex=="F"])
t.test(B.df$BDbyWeight[B.df$AllSex=="M"],B.df$BDbyWeight[B.df$AllSex=="F"])
t.test(B.scaled.df$BillDepth[B.scaled.df$AllSex=="M"],B.scaled.df$BillDepth[B.scaled.df$AllSex=="F"])
t.test(B.df$UBbyWeight[B.df$AllSex=="M"],B.df$UBbyWeight[B.df$AllSex=="F"])
t.test(B.df$TBSbyWeight[B.df$AllSex=="M"],B.df$TBSbyWeight[B.df$AllSex=="F"])
t.test(B.df$Tarsus[B.df$AllSex=="M"], B.df$Tarsus[B.df$AllSex=="F"])
UBSByWeightGDD.plot <- ggplot(data = B.df, aes(x=GDDSum12_22, y=UBSbyWeight, color=AllSex))+
geom_point(size = 1.2)+
geom_smooth()+
scale_color_manual(values = c("#009E73","#E69F00"), labels = c("Female","Male"))+
labs(color = "Sex")+
ylab("UBS/Weight Ratio")+
xlab("GDD")+
theme(plot.title = element_text(size = 22),
axis.text.x = element_text(size = 12),
axis.title.x = element_text(size = 14),
axis.text.y = element_text(size = 12),
axis.title.y = element_text(size = 14),
legend.position = "top",
plot.margin = margin(15,15,15,15))
UBSByWeightGDD.plot
#cowplot::save_plot("UBSByWeightGDD.plot.png", UBSByWeightGDD.plot)
BDByWeightGDD.plot <- ggplot(data = B.df, aes(x=GDDSum12_22, y=BDbyWeight, color=AllSex))+
geom_point(size = 1.2)+
geom_smooth()+
scale_color_manual(values = c("#009E73","#E69F00"), labels = c("Female","Male"))+
labs(color = "Sex")+
ylab("BD/Weight Ratio")+
xlab("GDD")+
theme(plot.title = element_text(size = 22),
axis.text.x = element_text(size = 12),
axis.title.x = element_text(size = 14),
axis.text.y = element_text(size = 12),
axis.title.y = element_text(size = 14),
legend.position = "top",
plot.margin = margin(15,15,15,15))
BDByWeightGDD.plot
cowplot::save_plot("BDByWeightGDD.plot.png", BDByWeightGDD.plot)
BDGDD.plot <- ggplot(data = B.df, aes(x=GDDSum12_22, y=BillDepth, color=AllSex))+
geom_point(size = 1.2)+
geom_smooth()+
scale_color_manual(values = c("#009E73","#E69F00"), labels = c("Female","Male"))+
labs(color = "Sex")+
ylab("Bill Depth")+
xlab("GDD")+
theme(plot.title = element_text(size = 22),
axis.text.x = element_text(size = 12),
axis.title.x = element_text(size = 14),
axis.text.y = element_text(size = 12),
axis.title.y = element_text(size = 14),
legend.position = "top",
plot.margin = margin(15,15,15,15))
BDGDD.plot
#cowplot::save_plot("UBSByWeightGDD.plot.png", UBSByWeightGDD.plot)
WeightGDD.plot <- ggplot(data = B.df, aes(x=GDDSum12_22, y=Weight, color=AllSex))+
geom_point(size = 1.2)+
geom_smooth()+
scale_color_manual(values = c("#009E73","#E69F00"), labels = c("Female","Male"))+
labs(color = "Sex")+
ylab("Weight")+
xlab("GDD")+
theme(plot.title = element_text(size = 22),
axis.text.x = element_text(size = 12),
axis.title.x = element_text(size = 14),
axis.text.y = element_text(size = 12),
axis.title.y = element_text(size = 14),
legend.position = "top",
plot.margin = margin(15,15,15,15))
WeightGDD.plot
#cowplot::save_plot("WeightGDD.plot.png", WeightGDD.plot)
WeightPrecip.plot <- ggplot(data = B.df, aes(x=PrecipSum12_22, y=Weight, color=AllSex))+
geom_point(size = 1.2)+
geom_smooth()+
scale_color_manual(values = c("#009E73","#E69F00"), labels = c("Female","Male"))+
labs(color = "Sex")+
ylab("Weight")+
xlab("Precip")+
theme(plot.title = element_text(size = 22),
axis.text.x = element_text(size = 12),
axis.title.x = element_text(size = 14),
axis.text.y = element_text(size = 12),
axis.title.y = element_text(size = 14),
legend.position = "top",
plot.margin = margin(15,15,15,15))
WeightPrecip.plot
#cowplot::save_plot("WeightPrecip.plot.png", WeightPrecip.plot)
BDResids.mdl <- lm(data = B.scaled.df, BillDepth ~ Weight + CalcAge)
BDResidsSex.mdl <- lm(data = B.scaled.df, BillDepth ~ Weight + CalcAge + AllSex)
B.scaled.df$BDResids <- BDResids.mdl$residuals
ggplot(data = B.scaled.df, aes(x=BDResids, fill = AllSex))+
geom_histogram()+
scale_fill_manual(values = c("#009E73","#E69F00"), labels = c("Female","Male"))
t.test(B.scaled.df$BDResids[B.scaled.df$AllSex=="M"],B.scaled.df$BDResids[B.scaled.df$AllSex=="F"])
UBSResids.mdl <- lm(data = B.scaled.df, UBS ~ Weight + CalcAge)
B.scaled.df$UBSResids <- UBSResids.mdl$residuals
ggplot(data = B.scaled.df, aes(x=UBSResids, fill = AllSex))+
geom_histogram()+
scale_fill_manual(values = c("#009E73","#E69F00"), labels = c("Female","Male"))
t.test(B.scaled.df$UBSResids[B.scaled.df$AllSex=="M"],B.scaled.df$UBSResids[B.scaled.df$AllSex=="F"])
BDResidsSex.mdl <- lm(data = B.scaled.df, BillDepth ~ Weight + CalcAge + AllSex)
t.test(B.scaled.df$BDResids[B.scaled.df$AllSex=="M"],B.scaled.df$BDResids[B.scaled.df$AllSex=="F"])
B.scaled.df$BDResidsSex <- BDResidsSex.mdl$residuals
ggplot(data = B.scaled.df, aes(x=BDResidsSex, fill = AllSex))+
geom_histogram()+
scale_fill_manual(values = c("#009E73","#E69F00"), labels = c("Female","Male"))
library(tidyverse)
library(dplyr)
library(broom) #tidy() to create tibbles from model summaries
library(car) #vif
library(cowplot)
library(lme4) #frequentist models
library(sjPlot) #plot_model & tab_model (blue = #377EB8)
library(ggpubr) #ggarrange
library(glmmTMB) #zi & overdispersed models
library(lmerTest) #lmerTest::step
library(ggeffects) #ggpredict
#PACKAGES FOR BAYESIAN MODELS
# library(rstanarm) #stan models
# library(shinystan) #stan model evaluation
#launch_shinystan_demo()
# library(loo) #use loo() to compare fits between bayesian models
=======
library(loo) #use loo() to compare fits between bayesian models
>>>>>>> 2b313633ef171432d810516a1ac77e16d247c575
library(plotly)
library(MuMIn) #dredge() for unsupervised model selection
library(AICcmodavg) #aictab() for AICc model comparisons
library(DHARMa)
library(DescTools)
library(umap)
library(tsne)
theme_set(theme_classic())
<<<<<<< HEAD
df <- read.csv("CrowNestlingClimate.csv", h=TRUE)
df <- df %>%
select(Year,NestName,ID,CalcAge,HatchDateJul,HatchDateJulYear,AllSex,BillNT,BillWidth,BillDepth,TEC,Head,UpperBill,UBillSurface,TotBillSurface,Skull,Tarsus,Weight)
View(df)
df <- read.csv("CrowNestlingClimate.csv", h=TRUE)
df <- df %>%
select(Year,NestName,ID,FieldAge,CalcAge,HatchDateJul,HatchDateJulYear,AllSex,BillNT,BillWidth,BillDepth,TEC,Head,UpperBill,UBillSurface,TotBillSurface,Skull,Tarsus,Weight)
df <- df %>%
rename(BillNT=BNT)
df <- df %>%
rename(BNT=BillNT)
df <- df %>%
select(Year,NestName,ID,AgeField,CalcAge,HatchDateJul,HatchDateJulYear,AllSex,BillNT,BillWidth,BillDepth,TEC,Head,UpperBill,UBillSurface,TotBillSurface,Skull,Tarsus,Weight)
df <- read.csv("CrowNestlingClimate.csv", h=TRUE)
df <- df %>%
select(Year,NestName,ID,AgeField,CalcAge,HatchDateJul,HatchDateJulYear,AllSex,BillNT,BillWidth,BillDepth,TEC,Head,UpperBill,UBillSurface,TotBillSurface,Skull,Tarsus,Weight)
df <- df %>%
rename(BNT=BillNT,BW=BillWidth,BD=BillDepth,UB=UpperBill,UBS=UBillSurface,TBS=TotBillSurface)
df <- df %>%
rename(FieldAge=AgeField,BNT=BillNT,BW=BillWidth,BD=BillDepth,UB=UpperBill,UBS=UBillSurface,TBS=TotBillSurface)
df <- read.csv("CrowNestlingClimate.csv", h=TRUE)
df <- df %>%
select(Year,NestName,ID,AgeField,CalcAge,HatchDateJul,HatchDateJulYear,AllSex,BillNT,BillWidth,BillDepth,TEC,Head,UpperBill,UBillSurface,TotBillSurface,Skull,Tarsus,Weight)
df <- df %>%
rename(FieldAge=AgeField,BNT=BillNT,BW=BillWidth,BD=BillDepth,UB=UpperBill,UBS=UBillSurface,TBS=TotBillSurface)
WeightByFieldAge.plot <- ggplot(data = df, aes(x=FieldAge,y=Weight,label=ID,color=HatchDatJul))+
geom_point()
WeightByFieldAge.plot
WeightByFieldAge.plot <- ggplot(data = df, aes(x=FieldAge,y=Weight,label=ID,color=HatchDateJul))+
geom_point()
WeightByFieldAge.plot
df <- df %>%
drop_na(df)
df <- df %>%
drop_na(Weight)
WeightByFieldAge.plot <- ggplot(data = df, aes(x=FieldAge,y=Weight,label=ID,color=HatchDateJul))+
geom_point()
WeightByFieldAge.plot
df <- read.csv("CrowNestlingClimate.csv", h=TRUE)
df <- df %>%
select(Year,NestName,ID,AgeField,CalcAge,HatchDateJul,HatchDateJulYear,AllSex,BillNT,BillWidth,BillDepth,TEC,Head,UpperBill,UBillSurface,TotBillSurface,Skull,Tarsus,Weight)
df <- df %>%
rename(FieldAge=AgeField,BNT=BillNT,BW=BillWidth,BD=BillDepth,UB=UpperBill,UBS=UBillSurface,TBS=TotBillSurface)
sapply(df, function(x) sum(is.na(x)))
countNAs <- sapply(df, function(x) sum(is.na(x)))
countNAs
df <- df %>%
filter_at(vars(Weight), all_vars(!is.na(.)))
countNAs <- sapply(df, function(x) sum(is.na(x)))
countNAs
df <- df %>%
filter_at(vars(Weight,HatchDateJul), all_vars(!is.na(.)))
countNAs <- sapply(df, function(x) sum(is.na(x)))
countNAs
df <- df %>%
filter_at(vars(Weight,HatchDateJul,BD), all_vars(!is.na(.)))
countNAs <- sapply(df, function(x) sum(is.na(x)))
countNAs
df <- df %>%
filter_at(vars(Weight,HatchDateJul,BD,Tarsus,Skull), all_vars(!is.na(.)))
countNAs <- sapply(df, function(x) sum(is.na(x)))
countNAs
df <- df %>%
filter_at(vars(Weight,HatchDateJul,BD,Tarsus,Skull,BW), all_vars(!is.na(.)))
countNAs <- sapply(df, function(x) sum(is.na(x)))
countNAs
WeightByFieldAge.plot <- ggplot(data = df, aes(x=FieldAge,y=Weight,label=ID,color=HatchDateJul))+
geom_point()
WeightByFieldAge.plot
WeightByFieldAge.plot <- ggplot(data = df, aes(x=FieldAge,y=Weight,label=ID,color=HatchDateJul))+
geom_point()
WeightByFieldAge.plot
ggplotly(WeightByFieldAge.plot)
df <- read.csv("CrowNestlingClimate.csv", h=TRUE)
#Select pertinent variables
df <- df %>%
select(Year,Name,NestName,ID,AgeField,CalcAge,HatchDateJul,HatchDateJulYear,AllSex,BillNT,BillWidth,BillDepth,TEC,Head,UpperBill,UBillSurface,TotBillSurface,Skull,Tarsus,Weight)
#Rename variables
df <- df %>%
rename(FieldAge=AgeField,BNT=BillNT,BW=BillWidth,BD=BillDepth,UB=UpperBill,UBS=UBillSurface,TBS=TotBillSurface)
#Count NAs
countNAs <- sapply(df, function(x) sum(is.na(x)))
countNAs
df <- df %>% filter(!grepl("doa",Name))
WeightByFieldAge.plot <- ggplot(data = df, aes(x=FieldAge,y=Weight,label=ID,color=HatchDateJul))+
geom_point()
ggplotly(WeightByFieldAge.plot)
df <- df %>% filter(!grepl("doa|dead",Name))
WeightByFieldAge.plot <- ggplot(data = df, aes(x=FieldAge,y=Weight,label=ID,color=HatchDateJul))+
geom_point()
ggplotly(WeightByFieldAge.plot)
#filter out Weights < 160
df <- df %>% filter(Weight < 160)
WeightByFieldAge.plot <- ggplot(data = df, aes(x=FieldAge,y=Weight,label=ID,color=HatchDateJul))+
geom_point()
ggplotly(WeightByFieldAge.plot)
df <- read.csv("CrowNestlingClimate.csv", h=TRUE)
#Select variables
df <- df %>%
select(Year,Name,NestName,ID,AgeField,CalcAge,HatchDateJul,HatchDateJulYear,AllSex,BillNT,BillWidth,BillDepth,TEC,Head,UpperBill,UBillSurface,TotBillSurface,Skull,Tarsus,Weight)
#Rename variables
df <- df %>%
rename(FieldAge=AgeField,BNT=BillNT,BW=BillWidth,BD=BillDepth,UB=UpperBill,UBS=UBillSurface,TBS=TotBillSurface)
#Count NAs
countNAs <- sapply(df, function(x) sum(is.na(x)))
countNAs
#Remove NAs
df <- df %>%
filter_at(vars(Weight,HatchDateJul,BD,Tarsus,Skull,BW), all_vars(!is.na(.)))
#Recount NAs
countNAs <- sapply(df, function(x) sum(is.na(x)))
countNAs
#filter out names with 'doa' or 'dead'
df <- df %>% filter(!grepl("doa|dead",Name))
#filter out Weights < 160
df <- df %>% filter(Weight > 160)
WeightByFieldAge.plot <- ggplot(data = df, aes(x=FieldAge,y=Weight,label=ID,color=HatchDateJul))+
geom_point()
ggplotly(WeightByFieldAge.plot)
View(df)
df <- df %>% filter(between(CalcAge, 24,30))
range(df$CalcAge)
range(df$Weight)
range(df$Weight)
ggplot(data = df, aes(x=CalcAge,y=Weight,label=ID))+
geom_point()
WeightByCalcAge.plot <- ggplot(data = df, aes(x=CalcAge,y=Weight,label=ID))+
geom_point()
ggplotly(WeightByCalcAge.plot)
climate.df <- read.csv("ClimateMetrics.csv", h=TRUE)
climate.df <- climate.df[,-c(1,3:4)]
df <- left_join(df,climate.df, by = "HatchDateJulYear")
View(df)
BD.mdl <- lm(data = df, BD ~ GDDSum12_22 * PrecipSum12_22 + Weight + CalcAge)
summary(BD.mdl)
NoScale.df <- df[,1:9]
Scale.df <- df[,10:20]
View(Scale.df)
View(df)
#drop Julian from dataframe
df <- df[,-21]
NoScale.df <- df[,1:9]
Scale.df <- df[,10:35]
scale(Scale.df)
Scale.df <- scale(Scale.df)
scaled.df <- cbind(NoScale.df,Scale.df)
View(scaled.df)
BD.scaled.mdl <- lm(data = scaled.df, BD ~ GDDSum12_22 * PrecipSum12_22 + Weight + CalcAge)
summary(BD.scaled.mdl)
WeightByFieldAge.plot <- ggplot(data = df, aes(x=FieldAge,y=Weight,label=ID,color=HatchDateJul))+
geom_point()
ggplotly(WeightByFieldAge.plot)
View(df)
library(tidyverse)
library(dplyr)
library(zoo)
df <- read.csv("IthacaWeatherData1989_2022.csv", h=TRUE)
df <- read.csv("IthacaWeatherData1989-2022.csv", h=TRUE)
df <- read.csv("IthacaWeatherData1989-2020.csv", h=TRUE)
View(df)
=======
>>>>>>> ee18c6c79fc6452194cc2957ff6a2c543fd46c0f
>>>>>>> fcb1e7b78be935a078ec7e02aba222a5352dbe60
>>>>>>> d51fafc0b7b9c2f2622737c5b7269ad2056891e7
library(tidyverse)
library(tidyverse)
library(dplyr)
library(broom) #tidy() to create tibbles from model summaries
library(car) #vif
library(cowplot)
library(lme4) #frequentist models
library(lme4) #frequentist models
library(sjPlot) #plot_model & tab_model (blue = #377EB8)
library(ggpubr) #ggarrange
library(lme4) #frequentist models
library(sjPlot) #plot_model & tab_model (blue = #377EB8)
library(ggpubr) #ggarrange
library(glmmTMB) #zi & overdispersed models
library(lmerTest) #lmerTest::step
library(ggeffects) #ggpredict
#PACKAGES FOR BAYESIAN MODELS
library(rstanarm) #stan models
library(shinystan) #stan model evaluation
#launch_shinystan_demo()
library(loo) #use loo() to compare fits between bayesian models
library(plotly)
library(MuMIn) #dredge() for unsupervised model selection
library(AICcmodavg) #aictab() for AICc model comparisons
library(DHARMa)
library(DescTools)
theme_set(theme_classic())
=======
df <- read.csv("CrowNestlingClimate_AllNestlingsCleaned&ClimateJoined.csv", h=TRUE)
df <- df[,-1]
#n=2035 nestlings, 39 variables
mat <- as.integer(rnorm(10*10) > 0) |>
matrix(nrow = 10)
View(mat)
mat <- as.integer(rnorm(10*10) > 0)# |>
rnorm(2*2)
as.integer(rnorm(2*2))
as.integer(rnorm(2*2))
library(DescTools)
?Entropy()
as.integer(rnorm(2*2))
as.integer(rnorm(2*2))
library(DescTools)
?Entropy()
as.integer(rnorm(2*2))
as.integer(rnorm(2*2))
library(DescTools)
as.integer(rnorm(2*2))
as.integer(rnorm(2*2))
as.integer(rnorm(3*3))
as.integer(rnorm(3*3) > 0
as.integer(rnorm(3*3) > 0)
as.integer(rnorm(3*3) > 0)
?rnorm()
rnorm(2*2)
rnorm(3+3)
rnorm(6)
|>
?|>
?"|>"
as.integer(rnorm(3*3) > 0) |>
matrix(nrow = 3)
as.integer(rnorm(3*3) <  0) |>
matrix(nrow = 3)
as.integer(rnorm(3*3) <  0) |>
matrix(nrow = 3)
as.integer(rnorm(3*3) >0) |>
matrix(nrow = 3)
as.integer(rnorm(3*3)) |>
matrix(nrow = 3)
as.integer(rnorm(3*3)) |>
matrix(nrow = 3)
as.integer(rnorm(3*3)) |>
matrix(nrow = 3)
rnorm(1)
mat <- as.integer(rnorm(3*3)) |>
matrix(nrow = 3)
mat <- as.integer(rnorm(3*3) >0) |>
matrix(nrow = 3)
View(mat)
mat <- as.integer(rnorm(3*3) >0) |>
matrix(nrow = 3)
mat <- as.integer(rnorm(3*3) >0) |>
matrix(nrow = 3)
S <- mat %*% t(mat)
View(S)
View(S)
?t()
?t()
S <- mat %*% t(mat)
?t
matrix(1:30,5,6)
matrix(1:50,5,10)
martix(rnorm(50),10,5)
martix(rnorm(50),10,5)
matrix(rnorm(50),10,5)
matrix(rnorm(100),10,10)
mean(matrix(rnorm(100),10,10))
mean(matrix(rnorm(1000),100,100))
mean(matrix(rnorm(10000),1000,1000))
mean(matrix(rnorm(100000),10000,10000))
mean(matrix(pnorm(100000),10000,10000))
mean(matrix(pnorm(100000),10000,10000))
mat <- as.integer(rnorm(3*3) >0) |>
matrix(nrow = 3)
mean(matrix(pnorm(100000),10000,10000))
?rnorm()
?dnorm()
dnorm(9)
dnorm(1)
dnorm(10)
C <- apply(mat, 1, sum)
C
?apply()
C <- apply(mat, 2, sum)
C
C <- apply(mat, 3, sum)
C <- apply(mat, 3, sum)
C <- apply(mat, 2, sum)
C
mat <- as.integer(rnorm(10*10) >0) |>
matrix(nrow = 3)
mat <- as.integer(rnorm(10*10) >0) |>
matrix(nrow = 10)
S <- mat %*% t(mat)
C <- apply(mat, 2, sum)
library(DescTools)
C
C <- apply(mat, 1, sum)
library(DescTools)
C
C <- apply(mat, 1, sum)
C
C <- apply(mat, 10, sum)
dim(mat)
C <- apply(mat, 9, sum)
C <- apply(mat, 5, sum)
C <- apply(mat, 2, sum)
C
C <- apply(mat, 4, sum)
C <- apply(mat, 3, sum)
C <- apply(mat, 2, sum)
C
C <- apply(mat, 1, sum)
C
C <- apply(mat, c(1,2), sum)
C
C <- apply(mat, 1, sum)
C
# http://en.wikipedia.org/wiki/Cluster_labeling
tab <- matrix(c(60,10000,200,500000), nrow=2, byrow=TRUE)
MutInf(tab, base=2)
tab
matrix(C(1,2,3,4))
martrix(c(1,2,3,4))
matrix(c(1,2,3,4))
matrix(c(1,2,3,4), nrow = 2)
MutInf(matrix(c(1,2,3,4), nrow = 2))
View(df)
clim.df <- read.csv("ClimateMetricsFull.csv",h=T)
View(clim.df)
clim.df$Year <- substr(clim.df$HatchDateJulYear,1,4)
clim.df <- clim.df %>% relocate(Year, .before = Date)
clim.df$Month <- substr(clim.df$Date,1,1)
clim.df <- clim.df %>% relocate(Month, .before = Date)
clim.df <- clim.df %>% select(Year,Month,MaxTempC,MinTempC,PrecipCM,GDD,CDD,HDD)
clim.df <- clim.df %>% select(Month, between(3:7))
clim.df <- clim.df %>% filter(between(Month,3,7))
clim.df <- clim.df %>% filter(between(Month,3,6))
MutInf(clim.df$GDD[clim.df$Year=="1990"], clim.df$GDD[clim.df$Year=="1991"])
MutInf(clim.df$GDD[clim.df$Year=="1991"], clim.df$GDD[clim.df$Year=="1992"])
Entropy(table(x), base=exp(1))
Entropy(table(y), base=exp(1))
Entropy(x, y, base=exp(1))
# Mutual information is
Entropy(table(x), base=exp(1)) + Entropy(table(y), base=exp(1)) - Entropy(x, y, base=exp(1))
MutInf(x, y, base=exp(1))
Entropy(table(x)) + Entropy(table(y)) - Entropy(x, y)
MutInf(x, y, base=2)
# http://en.wikipedia.org/wiki/Cluster_labeling
tab <- matrix(c(60,10000,200,500000), nrow=2, byrow=TRUE)
MutInf(tab, base=2)
?MutInf
install.packages("mcclust")
library(mcclust)
?comp.psm
comp.psm(clim.df$GDD[clim.df$Year=="1991"], clim.df$GDD[clim.df$Year=="1992"])
>>>>>>> 2b313633ef171432d810516a1ac77e16d247c575
