<<<<<<< HEAD
=======
<<<<<<< HEAD
=======
<<<<<<< HEAD
ci <- as_tibble(confint(mdl))
mdl.df$ci.lower <- ci$`2.5 %`
mdl.df$ci.upper <- ci$`97.5 %`
mdl.df <- mdl.df[-1,]
ggplot(data = mdl.df)+
geom_pointrange(aes(x=term, y=estimate, ymin=ci.lower, ymax=ci.upper), size=1, shape=20)+
=======
<<<<<<< HEAD
=======
<<<<<<< HEAD
=======
<<<<<<< HEAD
>>>>>>> d51fafc0b7b9c2f2622737c5b7269ad2056891e7
coord_flip()+
geom_hline(yintercept = 0, color="red",size=1)+
ggtitle("Parameter estimates")+
theme(plot.title = element_text(size = 22),
axis.text.x = element_text(size = 18),
axis.title.x = element_blank(),
axis.text.y = element_text(size = 18),
axis.title.y = element_blank(),
plot.margin = margin(15,15,15,15))
}
mdl.tbl <- function(mdl){
mdl.df <- tidy(mdl, quick = FALSE)
ci <- as_tibble(confint(mdl))
mdl.df$ci.lower <- ci$`2.5 %`
mdl.df$ci.upper <- ci$`97.5 %`
mdl.df <- mdl.df[-1,]
print(mdl.df)
}
# addline_format <- function(x,...){
#   gsub('\\s','\n',x)
# }
#Both sexes
B.df <- read.csv("CrowNestlingClimate_BothSexesClean.csv",h=TRUE)
B.df$AllSex <- as.factor(B.df$AllSex)
summary(B.df)
B.factors.df <- B.df[,1:5]
B.scaled.df <- scale(B.df[,6:27])
B.scaled.df <- cbind(B.factors.df,B.scaled.df)
#Males
M.df <- subset(B.df, AllSex=="M")
M.scaled.df <- subset(B.scaled.df, AllSex=="M")
#Females
F.df <- subset(B.df, AllSex=="F")
F.scaled.df <- subset(B.scaled.df, AllSex=="F")
# Upper bill GDD model
F.UB2.mdl <- lm(UB ~ GDDSum12_22*PrecipSum12_22 + Weight, data = F.df)
summary(F.UB2.mdl)
# Precipitation has a negative effect, mainly when it's cold
F.scaled.UB2.mdl <- lm(UB ~ GDDSum12_22*PrecipSum12_22 + Weight, data = F.scaled.df)
summary(F.scaled.UB2.mdl)
F.UB.inter.plot <- plot_model(F.UB2.mdl, type = "int")
F.UB.inter.plot +
scale_fill_discrete()
vif(F.UB2.mdl)
vif(F.scaled.UB2.mdl)
F.UB.df <- tidy(F.scaled.UB2.mdl, quick = FALSE)
ci <- as_tibble(confint(F.scaled.UB2.mdl))
F.UB.df$ci.lower <- ci$`2.5 %`
F.UB.df$ci.upper <- ci$`97.5 %`
F.UB.df <- F.UB.df[-c(1,2,4),]
F.UB.df$Sex <- "F"
F.UB.df$Metric <- "Upper Bill"
# Bill nares to tip model
F.scaled.BNT2.mdl <- lm(BillNT ~ GDDSum12_22*PrecipSum12_22 + Weight, data = F.scaled.df)
summary(F.scaled.BNT2.mdl)
# Precipitation has a negative effect, mainly when it's cold
F.BNT.df <- tidy(F.scaled.BNT2.mdl, quick = FALSE)
ci <- as_tibble(confint(F.scaled.BNT2.mdl))
F.BNT.df$ci.lower <- ci$`2.5 %`
F.BNT.df$ci.upper <- ci$`97.5 %`
F.BNT.df <- F.BNT.df[5,]
F.BNT.df$Sex <- "F"
F.BNT.df$Metric <- "Bill nares to tip"
# Upper bill surface area model
F.scaled.UBS2.mdl <- lm(UBS ~ GDDSum12_22*PrecipSum12_22 + Weight, data = F.scaled.df)
summary(F.scaled.UBS2.mdl)
# Precipitation has a negative effect, mainly when it's cold
F.UBS.df <- tidy(F.scaled.UBS2.mdl, quick = FALSE)
ci <- as_tibble(confint(F.scaled.UBS2.mdl))
F.UBS.df$ci.lower <- ci$`2.5 %`
F.UBS.df$ci.upper <- ci$`97.5 %`
F.UBS.df <- F.UBS.df[c(2,3,5),]
F.UBS.df$Sex <- "F"
F.UBS.df$Metric <- "Upper Bill Surface Area"
# Bill depth model
F.scaled.BD2.mdl <- lm(BillDepth ~ GDDSum12_22*PrecipSum12_22 + Weight, data = F.scaled.df)
summary(F.scaled.BD2.mdl)
# Temperature is the only important climate variable
F.BD.df <- tidy(F.scaled.BD2.mdl, quick = FALSE)
ci <- as_tibble(confint(F.scaled.BD2.mdl))
F.BD.df$ci.lower <- ci$`2.5 %`
F.BD.df$ci.upper <- ci$`97.5 %`
F.BD.df <- F.BD.df[2,]
F.BD.df$Sex <- "F"
F.BD.df$Metric <- "Bill Depth"
# Tarsus GDD2 model
F.scaled.Tarsus2.mdl <- lm(Tarsus ~ GDDSum12_22*PrecipSum12_22 + Weight, data = F.scaled.df)
summary(F.scaled.Tarsus2.mdl)
# Climate variables have no effect
F.Tarsus.df <- tidy(F.scaled.Tarsus2.mdl, quick = FALSE)
ci <- as_tibble(confint(F.scaled.Tarsus2.mdl))
F.Tarsus.df$ci.lower <- ci$`2.5 %`
F.Tarsus.df$ci.upper <- ci$`97.5 %`
F.Tarsus.df <- F.Tarsus.df[c(2:4),]
F.Tarsus.df$Sex <- "F"
F.Tarsus.df$Metric <- "Tarsus"
# Upper bill model
M.scaled.UB2.mdl <- lm(UB ~ GDDSum12_22*PrecipSum12_22 + Weight, data = M.scaled.df)
summary(M.scaled.UB2.mdl)
# Weight is the only important predictor
M.UB.df <- tidy(M.scaled.UB2.mdl, quick = FALSE)
ci <- as_tibble(confint(M.scaled.UB2.mdl))
M.UB.df$ci.lower <- ci$`2.5 %`
M.UB.df$ci.upper <- ci$`97.5 %`
M.UB.df <- M.UB.df[3,]
M.UB.df$Sex <- "M"
M.UB.df$Metric <- "Upper Bill"
# Bill nares to tip model
M.scaled.BNT2.mdl <- lm(BillNT ~ GDDSum12_22*PrecipSum12_22 + Weight, data = M.scaled.df)
summary(M.scaled.BNT2.mdl)
# Weight is the only important predictor
M.BNT.df <- tidy(M.scaled.BNT2.mdl, quick = FALSE)
ci <- as_tibble(confint(M.scaled.BNT2.mdl))
M.BNT.df$ci.lower <- ci$`2.5 %`
M.BNT.df$ci.upper <- ci$`97.5 %`
M.BNT.df <- M.BNT.df[2,]
M.BNT.df$Sex <- "M"
M.BNT.df$Metric <- "Bill nares to tip"
# Upper bill surface area model
M.scaled.UBS2.mdl <- lm(UBS ~ GDDSum12_22*PrecipSum12_22 + Weight, data = M.scaled.df)
summary(M.scaled.UBS2.mdl)
M.UBS.df <- tidy(M.scaled.UBS2.mdl, quick = FALSE)
ci <- as_tibble(confint(M.scaled.UBS2.mdl))
M.UBS.df$ci.lower <- ci$`2.5 %`
M.UBS.df$ci.upper <- ci$`97.5 %`
M.UBS.df <- M.UBS.df[2,]
M.UBS.df$Sex <- "M"
M.UBS.df$Metric <- "Upper Bill Surface Area"
# Bill depth model
M.scaled.BD2.mdl <- lm(BillDepth ~ GDDSum12_22*PrecipSum12_22 + Weight, data = M.scaled.df)
summary(M.scaled.BD2.mdl)
# Temperature and the interaction between temp and precip are both important
M.BD.df <- tidy(M.scaled.BD2.mdl, quick = FALSE)
ci <- as_tibble(confint(M.scaled.BD2.mdl))
M.BD.df$ci.lower <- ci$`2.5 %`
M.BD.df$ci.upper <- ci$`97.5 %`
M.BD.df <- M.BD.df[c(2,5),]
M.BD.df$Sex <- "M"
M.BD.df$Metric <- "Bill Depth"
# Tarsus model
M.scaled.Tarsus2.mdl <- lm(Tarsus ~ GDDSum12_22*PrecipSum12_22 + Weight, data = M.scaled.df)
summary(M.scaled.Tarsus2.mdl)
# Climate variables have no effect
M.Tarsus.df <- tidy(M.scaled.Tarsus2.mdl, quick = FALSE)
ci <- as_tibble(confint(M.scaled.Tarsus2.mdl))
M.Tarsus.df$ci.lower <- ci$`2.5 %`
M.Tarsus.df$ci.upper <- ci$`97.5 %`
M.Tarsus.df <- M.Tarsus.df[c(2:4),]
M.Tarsus.df$Sex <- "M"
M.Tarsus.df$Metric <- "Tarsus"
B.scaled.UBS2.mdl <- lm(UBS ~ GDDSum12_22 + PrecipSum12_22*AllSex + Weight, data = B.scaled.df)
summary(B.scaled.UBS2.mdl)
PosterForestPlot.df <- rbind(F.Tarsus.df,M.Tarsus.df,F.BNT.df,M.BNT.df,F.UB.df,M.UB.df,F.BD.df,M.BD.df,F.UBS.df,M.UBS.df)
TarsusForestPlot.df <- subset(PosterForestPlot.df, Metric=="Tarsus")
BNTForestPlot.df <- subset(PosterForestPlot.df, Metric=="Bill nares to tip")
UBForestPlot.df <- subset(PosterForestPlot.df, Metric=="Upper Bill")
BDForestPlot.df <- subset(PosterForestPlot.df, Metric=="Bill Depth")
UBSForestPlot.df <- subset(PosterForestPlot.df, Metric=="Upper Bill Surface Area")
tarsus.fplot <- ggplot(data = TarsusForestPlot.df)+
geom_pointrange(aes(x=term, y=estimate, ymin=ci.lower, ymax=ci.upper, color=Sex),
position=position_dodge(width=0.3), shape=20, size=1.3)+
coord_flip()+
geom_hline(yintercept = 0, color="black",size=1, linetype="dotted")+
scale_color_manual(values = c("#009E73","#E69F00"), labels = c("Female","Male"))+
scale_x_discrete(labels=c("GDD", "Precip", "Weight"))+
ylab("Parameter Estimate")+
theme(plot.title = element_text(size = 22),
axis.text.x = element_text(size = 14),
axis.title.x = element_text(size = 16),
axis.text.y = element_text(size = 14),
axis.title.y = element_blank(),
legend.position = "top",
plot.margin = margin(15,15,15,15))
tarsus.fplot
cowplot::save_plot("tarsus.fplot.png", tarsus.fplot, base_height = 4, base_width = 5)
BNT.fplot <- ggplot(data = BNTForestPlot.df)+
geom_pointrange(aes(x=term, y=estimate, ymin=ci.lower, ymax=ci.upper, color=Sex),
position=position_dodge(width=0.3), shape=20, size=1.3)+
coord_flip()+
geom_hline(yintercept = 0, color="black",size=1, linetype="dotted")+
scale_color_manual(values = c("#009E73","#E69F00"), labels = c("Female","Male"))+
scale_x_discrete(labels=c("GDD", "GDD * Precip"))+
scale_y_continuous(limits = c(-.3,.3), breaks = seq(-.2,.2,.1))+
theme(plot.title = element_text(size = 22),
axis.text.x = element_text(size = 14),
axis.title.x = element_blank(),
axis.text.y = element_text(size = 14),
axis.title.y = element_blank(),
legend.position = "none",
plot.margin = margin(15,15,15,15))
BNT.fplot
UB.fplot <- ggplot(data = UBForestPlot.df)+
geom_pointrange(aes(x=term, y=estimate, ymin=ci.lower, ymax=ci.upper, color=Sex),
position=position_dodge(width=0.3), shape=20, size=1.3)+
coord_flip()+
geom_hline(yintercept = 0, color="black",size=1, linetype="dotted")+
scale_color_manual(values = c("#009E73","#E69F00"), labels = c("Female","Male"))+
scale_x_discrete(labels=c("GDD * Precip", "Precip"))+
scale_y_continuous(limits = c(-.3,.3), breaks = seq(-.2,.2,.1))+
theme(plot.title = element_text(size = 22),
axis.text.x = element_text(size = 14),
axis.title.x = element_blank(),
axis.text.y = element_text(size = 14),
axis.title.y = element_blank(),
legend.position = "none",
plot.margin = margin(15,15,15,15))
UB.fplot
BD.fplot <- ggplot(data = BDForestPlot.df)+
geom_pointrange(aes(x=term, y=estimate, ymin=ci.lower, ymax=ci.upper, color=Sex),
position=position_dodge(width=0.3), shape=20, size=1.3)+
coord_flip()+
geom_hline(yintercept = 0, color="black",size=1, linetype="dotted")+
scale_color_manual(values = c("#009E73","#E69F00"), labels = c("Female","Male"))+
scale_x_discrete(labels=c("GDD", "GDD * Precip"))+
scale_y_continuous(limits = c(-.3,.3), breaks = seq(-.2,.2,.1))+
theme(plot.title = element_text(size = 22),
axis.text.x = element_text(size = 14),
axis.title.x = element_blank(),
axis.text.y = element_text(size = 14),
axis.title.y = element_blank(),
legend.position = "none",
plot.margin = margin(15,15,15,15))
BD.fplot
UBS.fplot <- ggplot(data = UBSForestPlot.df)+
geom_pointrange(aes(x=term, y=estimate, ymin=ci.lower, ymax=ci.upper, color=Sex),
position=position_dodge(width=0.3), shape=20, size=1.3)+
coord_flip()+
geom_hline(yintercept = 0, color="black",size=1, linetype="dotted")+
scale_color_manual(values = c("#009E73","#E69F00"), labels = c("Female","Male"))+
scale_x_discrete(labels=c("GDD", "GDD * Precip", "Precip"))+
scale_y_continuous(limits = c(-.3,.3), breaks = seq(-.2,.2,.1))+
theme(plot.title = element_text(size = 22),
axis.text.x = element_text(size = 14),
axis.title.x = element_blank(),
axis.text.y = element_text(size = 14),
axis.title.y = element_blank(),
legend.position = "none",
plot.margin = margin(15,15,15,15))
UBS.fplot
billMetrics.wrap <- ggarrange(BNT.fplot,UB.fplot,BD.fplot,UBS.fplot, ncol = 1, common.legend = TRUE)
annotate_figure(billMetrics.wrap, bottom = text_grob("Parameter Estimate", hjust = .1, size = 20))
cowplot::save_plot("billMetrics.wrap.png", billMetrics.wrap, base_height = 8, base_width = 5)
UBSByWeightGDD.plot <- ggplot(data = B.df, aes(x=GDDSum12_22, y=UBS/Weight, color=AllSex))+
geom_point(size = 1.2)+
geom_smooth()+
scale_color_manual(values = c("#009E73","#E69F00"), labels = c("Female","Male"))+
labs(color = "Sex")+
ylab("UBS/Weight Ratio")+
xlab("GDD")+
theme(plot.title = element_text(size = 22),
axis.text.x = element_text(size = 12),
axis.title.x = element_text(size = 14),
axis.text.y = element_text(size = 12),
axis.title.y = element_text(size = 14),
legend.position = "top",
plot.margin = margin(15,15,15,15))
UBSByWeightGDD.plot
cowplot::save_plot("UBSByWeightGDD.plot.png", UBSByWeightGDD.plot)
# Create USB Weight Ratio
B.df$USBbyWeight <- B.df$UBS/B.df$Weight
t.test(B.df$USBbyWeight[B.df$AllSex=="M"], B.df$USBbyWeight[B.df$AllSex=="F"])
F.UB.inter.plot <- F.UB.inter.plot +
scale_color_discrete(name="Precip Levels", labels=c("Low", "High"))+
ylab("Upper Bill")+
xlab("GDD")+
theme(plot.title = element_blank(),
axis.text.x = element_text(size = 12),
axis.title.x = element_text(size = 14),
axis.text.y = element_text(size = 12),
axis.title.y = element_text(size = 14),
legend.position = "top",
plot.margin = margin(15,15,15,15))
F.UB.inter.plot
cowplot::save_plot("F.UB.inter.plot.png", F.UB.inter.plot)
<<<<<<< HEAD
summary(F.scaled.UB2.mdl)
F.UB.inter.plot +
scale_fill_discrete()
JulianGDD.plot <- ggplot(data = B.df, aes(x=HatchDateJulYear, y=GDDSum12_22, color=AllSex, label=ID))+
=======
tarsus.fplot
rnorm2 <- function(n,mean,sd) { mean+sd*scale(rnorm(n)) }
g <- d$mydata
set.seed(123)
set.seed(123)
set.seed(607)
rnorm2 <- function(n,mean,sd) { mean+sd*scale(rnorm(n)) }
df1 <- data.frame(neg = round(rnorm2(30,200,25)),
pos = round(rnorm2(30,210,25)),
exp = round(rnorm2(30,230,25)))
df1
pos <- df1[,2]
pos
hist_plot <- function(h,g){
h <- hist(g, breaks = 10, density = 10,
col = "lightgray", xlab = "Accuracy", main = "Overall")
xfit <- seq(min(g), max(g), length = 40)
yfit <- dnorm(xfit, mean = mean(g), sd = sd(g))
yfit <- yfit * diff(h$mids[1:2]) * length(g)
}
hist_plot <- function(h,g){
h <- hist(g, breaks = 10, density = 10,
col = "lightgray", xlab = "Accuracy", main = "Overall")
xfit <- seq(min(g), max(g), length = 40)
yfit <- dnorm(xfit, mean = mean(g), sd = sd(g))
yfit <- yfit * diff(h$mids[1:2]) * length(g)
h
}
hist_plot(pos)
hist_plot("pos")
hist_plot <- function(g){
hist(g, breaks = 10, density = 10,
col = "lightgray", xlab = "Accuracy", main = "Overall")
xfit <- seq(min(g), max(g), length = 40)
yfit <- dnorm(xfit, mean = mean(g), sd = sd(g))
yfit <- yfit * diff(h$mids[1:2]) * length(g)
paste(h)
}
hist_plot(pos)
hist_plot <- function(g){
hist(g, breaks = 10, density = 10,
col = "lightgray", xlab = "Accuracy", main = "Overall")
xfit <- seq(min(g), max(g), length = 40)
yfit <- dnorm(xfit, mean = mean(g), sd = sd(g))
yfit <- yfit * diff(h$mids[1:2]) * length(g)
}
hist_plot(pos)
hist_plot <- function(g){
hist(g, breaks = 10, density = 10,
col = "lightgray", xlab = "Accuracy", main = "Overall")
xfit <- seq(min(g), max(g), length = 40)
yfit <- dnorm(xfit, mean = mean(g), sd = sd(g))
yfit <- yfit * diff(h$mids[1:2]) * length(g)
}
hist_plot(pos)
g <- df1$neg
h <- hist(g, breaks = 10, density = 10,
col = "lightgray", xlab = "Accuracy", main = "Overall")
xfit <- seq(min(g), max(g), length = 40)
yfit <- dnorm(xfit, mean = mean(g), sd = sd(g))
yfit <- yfit * diff(h$mids[1:2]) * length(g)
h
h
h <- hist(g, breaks = 10, density = 10,
col = "lightgray", xlab = "Accuracy", main = "Overall")
xfit <- seq(min(g), max(g), length = 40)
yfit <- dnorm(xfit, mean = mean(g), sd = sd(g))
yfit <- yfit * diff(h$mids[1:2]) * length(g)
paste(h)
h <- hist(g, breaks = 10, density = 10,
col = "lightgray", xlab = "Accuracy", main = "Overall")
hist(g, breaks = 10, density = 10,
col = "lightgray", xlab = "Accuracy", main = "Overall")
hist(g, breaks = 10, density = 10,
col = "lightgray", xlab = "Accuracy", main = "Overall")
pos
View(df1)
neg <- df1[,1]
neg
install.packages("asnipe")
=======
df$MaxTempMean11 <- dplyr::lag(df$leadMean11, n = 5)
#verify that MaxTempMean11 is accurately calculating the mean Max temp for the prior 11 days.
c(mean(df[6:16,7]), df[16,18]) #manually calculated mean matches MaxTempMean11
df$leadMax19 <- dplyr::lead(df$MaxTemp, n = 9)
df$leadMean19 <- zoo::rollmean(df$leadMax19, k=19, fill = NA, align = 'right')
df$MaxTempMean19 <- dplyr::lag(df$leadMean19, n = 9)
#verify that MaxTempMean19 is accurately calculating the mean Max temp for the prior 11 days.
c(mean(df[10:28,7]), df[28,21]) #manually calculated mean should match MaxTempMean11
df$leadPrecip11 <- dplyr::lead(df$Precip, n = 5)
View(df)
df$leadSum11 <- zoo::rollsum(df$leadPrecip11, k=11, fill = NA, align = 'right')
df$leadPrecip11 <- zoo::rollsum(df$Precip, k=3, fill = NA, align = 'right')
df$leadPrecip11 <- zoo::rollsum(df$Precip, k=11, fill = NA, align = 'right')
df$leadPrecip11 <- zoo::rollsum(df$Precip, k=5, fill = NA, align = 'right')
library(tidyverse)
library(dplyr)
library(zoo)
df <- read.csv("IthacaWeatherData1990_2020.csv", h=TRUE)
#coerce climate variables to class numeric
df$MaxTemp <- as.numeric(df$MaxTemp)
df$Precip <- as.numeric(df$Precip)
df$HDD <- as.numeric(df$HDD)
View(df)
df$leadPrecip11 <- zoo::rollsum(df$Precip, k=11, fill = NA, align = 'right')
df$leadPrecip11 <- zoo::rollsum(df$Precip, k=3, fill = NA, align = 'right')
df$leadPrecip11 <- zoo::rollapply(df$Precip, k=5, FUN=sum, fill = NA)
df$leadPrecip11 <- zoo::rollapply(df$Precip, k=5, width=1, FUN=sum, fill = NA)
View(df)
df$leadPrecip11 <- zoo::rollapply(df$Precip, width=1, by = 5, FUN=sum, fill = NA)
df$leadPrecip11 <- zoo::rollapply(df$Precip, width=1, by = 5, FUN=sum, fill = NA, align = 'right')
df$leadPrecip11 <- zoo::rollapply(df$Precip, width=1, FUN=sum, fill = NA, align = 'right')
df$leadPrecip11 <- zoo::rollapply(df$Precip, width=5, FUN=sum, fill = NA, align = 'right')
df$leadPrecip11 <- zoo::rollapply(df$Precip, width=5, FUN=sum, fill = NA, align = 'left')
df$leadPrecip11 <- zoo::rollapply(df$Precip, width=5, FUN=sum, align = 'left')
df$leadPrecip11 <- zoo::rollapply(df$Precip, width=5, FUN=sum, align = 'right')
df$leadPrecip11 <- zoo::rollapply(df$Precip, width=5, FUN=sum, align = 'right')
df$leadPrecip11 <- zoo::rollapply(df$Precip, width=5, FUN=sum, align = 'right', fill = NA)
df$leadPrecip11 <- zoo::rollapply(df$Precip, width=5, FUN=sum, align = 'right', fill = NA, partial = TRUE)
df$leadPrecip11 <- zoo::rollapply(df$Precip, width=5, FUN=sum, align = 'right', fill = NA, partial = TRUE, na.rm = TRUE)
df$Precip11 <- zoo::rollapply(df$Precip, width=11, FUN=sum, align = 'right', fill = NA, partial = TRUE, na.rm = TRUE)
#verify that MaxTempMean19 is accurately calculating the mean Max temp for the prior 11 days.
c(sum(df[1:11,10]), df[11,17]) #manually calculated mean should match MaxTempMean11
#verify that MaxTempMean19 is accurately calculating the mean Max temp for the prior 11 days.
c(sum(df[1:11,10], na.rm = TRUE), df[11,17]) #manually calculated mean should match MaxTempMean11
library(tidyverse)
library(dplyr)
library(zoo)
df <- read.csv("IthacaWeatherData1990_2020.csv", h=TRUE)
#coerce climate variables to class numeric
df$MaxTemp <- as.numeric(df$MaxTemp)
df$Precip <- as.numeric(df$Precip)
df$HDD <- as.numeric(df$HDD)
#create columns to contain
df$leadMax11 <- dplyr::lead(df$MaxTemp, n = 5)
df$leadMean11 <- zoo::rollmean(df$leadMax11, k=11, fill = NA, align = 'right')
df$MaxTempMean11 <- dplyr::lag(df$leadMean11, n = 5)
#verify that MaxTempMean11 is accurately calculating the mean Max temp for the previous 11 days.
c(mean(df[6:16,7]), df[16,18]) #manually calculated mean matches MaxTempMean11
df$leadMax19 <- dplyr::lead(df$MaxTemp, n = 9)
df$leadMean19 <- zoo::rollmean(df$leadMax19, k=19, fill = NA, align = 'right')
df$MaxTempMean19 <- dplyr::lag(df$leadMean19, n = 9)
#verify that MaxTempMean19 is accurately calculating the mean Max temp for the previous 19 days.
c(mean(df[10:28,7]), df[28,21]) #manually calculated mean should match MaxTempMean11
df$Precip11 <- zoo::rollapply(df$Precip, width=11, FUN=sum, align = 'right', fill = NA, partial = TRUE, na.rm = TRUE)
#verify that TotPrecip11 is accurately calculating the summed precip for the previous 11 days.
c(sum(df[1:11,10], na.rm = TRUE), df[11,22]) #manually calculated mean should match MaxTempMean11
df$TotPrecip19 <- zoo::rollapply(df$Precip, width=19, FUN=sum, align = 'right', fill = NA, partial = TRUE, na.rm = TRUE)
df$TotPrecip19 <- zoo::rollapply(df$Precip, width=19, FUN=sum, align = 'right', fill = NA, partial = TRUE, na.rm = TRUE)
```{r code check}
#verify that TotPrecip19 is accurately calculating the summed precip for the previous 11 days.
c(sum(df[1:19,10], na.rm = TRUE), df[19,23]) #manually calculated mean should match MaxTempMean11
View(df)
#verify that TotPrecip19 is accurately calculating the summed precip for the previous 11 days.
c(sum(df[11:29,10], na.rm = TRUE), df[29,23]) #manually calculated mean should match MaxTempMean11
library(tidyverse)
library(dplyr)
library(zoo)
df <- read.csv("IthacaWeatherData1990_2020.csv", h=TRUE)
#coerce climate variables to class numeric
df$MaxTemp <- as.numeric(df$MaxTemp)
df$Precip <- as.numeric(df$Precip)
df$HDD <- as.numeric(df$HDD)
#create columns to contain
df$leadMax11 <- dplyr::lead(df$MaxTemp, n = 5)
df$leadMean11 <- zoo::rollmean(df$leadMax11, k=11, fill = NA, align = 'right')
df$MaxTempMean11 <- dplyr::lag(df$leadMean11, n = 5)
#verify that MaxTempMean11 is accurately calculating the mean Max temp for the previous 11 days.
c(mean(df[6:16,7]), df[16,18]) #manually calculated mean matches MaxTempMean11
df$leadMax19 <- dplyr::lead(df$MaxTemp, n = 9)
df$leadMean19 <- zoo::rollmean(df$leadMax19, k=19, fill = NA, align = 'right')
df$MaxTempMean19 <- dplyr::lag(df$leadMean19, n = 9)
#verify that MaxTempMean19 is accurately calculating the mean Max temp for the previous 19 days.
c(mean(df[10:28,7]), df[28,21]) #manually calculated mean should match MaxTempMean11
df$TotPrecip11 <- zoo::rollapply(df$Precip, width=11, FUN=sum, align = 'right', fill = NA, partial = TRUE, na.rm = TRUE)
#verify that TotPrecip11 is accurately calculating the summed precip for the previous 11 days.
c(sum(df[1:11,10], na.rm = TRUE), df[11,22]) #manually calculated sum should match TotPrecip11
df$TotPrecip19 <- zoo::rollapply(df$Precip, width=19, FUN=sum, align = 'right', fill = NA, partial = TRUE, na.rm = TRUE)
#verify that TotPrecip19 is accurately calculating the summed precip for the previous 19 days.
c(sum(df[11:29,10], na.rm = TRUE), df[29,23]) #manually calculated sum should match TotPrecip19
df$TotHDD11 <- zoo::rollapply(df$HDD, width=11, FUN=sum, align = 'right', fill = NA, partial = TRUE, na.rm = TRUE)
View(df)
#verify that TotHDD11 is accurately calculating the summed HDD for the previous 11 days.
>>>>>>> ee18c6c79fc6452194cc2957ff6a2c543fd46c0f
c(sum(df[11:29,13], na.rm = TRUE), df[29,24]) #manually calculated sum should match TotHDD11
#verify that TotHDD11 is accurately calculating the summed HDD for the previous 11 days.
c(sum(df[1:11,13], na.rm = TRUE), df[11,24]) #manually calculated sum should match TotHDD11
#verify that TotHDD11 is accurately calculating the summed HDD for the previous 11 days.
c(sum(df[11:21,13], na.rm = TRUE), df[21,24]) #manually calculated sum should match TotHDD11
#verify that TotHDD11 is accurately calculating the summed HDD for the previous 11 days.
c(sum(df[111:121,13], na.rm = TRUE), df[121,24]) #manually calculated sum should match TotHDD11
df$TotHDD19 <- zoo::rollapply(df$HDD, width=19, FUN=sum, align = 'right', fill = NA, partial = TRUE, na.rm = TRUE)
#verify that TotHDD19 is accurately calculating the summed HDD for the previous 19 days.
c(sum(df[111:129,13], na.rm = TRUE), df[129,25]) #manually calculated sum should match TotHDD19
#New dataframe with the derived climate metrics
climMetrics.df <- as.data.frame(df[,c(1:6, 18, 21:25)])
View(climMetrics.df)
#New dataframe with the derived climate metrics
climMetrics.df <- as.data.frame(df[60:11514,c(1:6, 18, 21:25)])
View(climMetrics.df)
?write.csv()
?write.csv()
write.csv(climMetrics.df, "C:\Users\Justin Mann\Documents\RProjects\CrowBase\ClimateMetrics.csv",
write.csv(climMetrics.df, "C:\Users\Justin\Documents\RProjects\CrowBase\ClimateMetrics.csv",
write.csv(climMetrics.df, "C:\\Users\\Justin Mann\\Documents\\RProjects\\CrowBase\\ClimateMetrics.csv",
row.names = FALSE)
install.packages("bayesdfa")
library(bayesdfa)
df <- read.csv("ClimateMetrics.csv", h=TRUE)
set.seed(42)
s <- sim_dfa(num_trends = 1, num_years = 20, num_ts = 3)
# only 1 chain and 250 iterations used so example runs quickly:
m <- fit_dfa(y = s$y_sim, iter = 50, chains = 1)
## Not run:
# example of observation error covariates
set.seed(42)
obs_covar <- expand.grid("time" = 1:20, "timeseries" = 1:3, "covariate" = 1)
obs_covar$value <- rnorm(nrow(obs_covar), 0, 0.1)
m <- fit_dfa(y = s$y_sim, iter = 50, chains = 1, obs_covar = obs_covar)
# example of process error covariates
pro_covar <- expand.grid("time" = 1:20, "trend" = 1:2, "covariate" = 1)
pro_covar$value <- rnorm(nrow(pro_covar), 0, 0.1)
m <- fit_dfa(y = s$y_sim, iter = 50, chains = 1, num_trends = 2, pro_covar = pro_covar)
# example of long format data
s <- sim_dfa(num_trends = 1, num_years = 20, num_ts = 3)
obs <- c(s$y_sim[1, ], s$y_sim[2, ], s$y_sim[3, ])
long <- data.frame("obs" = obs, "ts" = sort(rep(1:3, 20)), "time" = rep(1:20, 3))
m <- fit_dfa(y = long, data_shape = "long", iter = 50, chains = 1)
# example of long format data with obs covariates
s <- sim_dfa(num_trends = 1, num_years = 20, num_ts = 3)
obs <- c(s$y_sim[1, ], s$y_sim[2, ], s$y_sim[3, ])
long <- data.frame("obs" = obs, "ts" = sort(rep(1:3, 20)), "time" = rep(1:20, 3))
obs_covar <- expand.grid("time" = 1:20, "timeseries" = 1:3, "covariate" = 1:2)
obs_covar$value <- rnorm(nrow(obs_covar), 0, 0.1)
m <- fit_dfa(y = long, data_shape = "long", iter = 50, chains = 1, obs_covar = obs_covar)
# example of model with Z constrained to be proportions and wide format data
s <- sim_dfa(num_trends = 1, num_years = 20, num_ts = 3)
m <- fit_dfa(y = s$y_sim, z_model = "proportion", iter = 50, chains = 1)
library(tidyverse)
library(dplyr)
library(zoo)
df <- read.csv("IthacaWeatherData1990_2020.csv", h=TRUE)
#coerce climate variables to class numeric
df$MaxTemp <- as.numeric(df$MaxTemp)
df$Precip <- as.numeric(df$Precip)
df$HDD <- as.numeric(df$HDD)
View(df)
#create columns to contain
df$leadMax11 <- dplyr::lead(df$MaxTemp, n = 5)
df$leadMean11 <- zoo::rollmean(df$leadMax11, k=11, fill = NA, align = 'right')
df$MaxTempMean11 <- dplyr::lag(df$leadMean11, n = 5)
#verify that MaxTempMean11 is accurately calculating the mean Max temp for the previous 11 days.
c(mean(df[6:16,7]), df[16,18]) #manually calculated mean matches MaxTempMean11
df$leadMax19 <- dplyr::lead(df$MaxTemp, n = 9)
df$leadMean19 <- zoo::rollmean(df$leadMax19, k=19, fill = NA, align = 'right')
df$MaxTempMean19 <- dplyr::lag(df$leadMean19, n = 9)
#verify that MaxTempMean19 is accurately calculating the mean Max temp for the previous 19 days.
c(mean(df[10:28,7]), df[28,21]) #manually calculated mean should match MaxTempMean11
library(tidyverse)
library(dplyr)
library(zoo)
df <- read.csv("IthacaWeatherData1990_2020.csv", h=TRUE)
#coerce climate variables to class numeric
df$MaxTemp <- as.numeric(df$MaxTemp)
df$Precip <- as.numeric(df$Precip)
df$HDD <- as.numeric(df$HDD)
View(df)
df$MaxTempMean1_11 <- zoo::rollapply(df$MaxTemp, width=11, FUN=mean, align = 'left', fill = NA, partial = TRUE, na.rm = TRUE)
#verify that MaxTempMean11 is accurately calculating the mean Max temp for the previous 11 days.
c(mean(df[1:11,7]), df[1,16]) #manually calculated mean matches MaxTempMean11
df$leadMax12_23 <- dplyr::lead(df$MaxTemp, n = 5)
df$leadMax12_23 <- dplyr::lead(df$MaxTemp, n = 11)
df$MaxTempMean12_23 <- zoo::rollapply(df$leadMax12_23, width=11, FUN=mean, align = 'left', fill = NA, partial = TRUE, na.rm = TRUE)
#Code check: Is MaxTempMean12_23 calculating the mean Max temp for the following 11 days.
c(mean(df[12:23,7]), df[1,18]) #manually calculated mean matches MaxTempMean12_23
#Code check: Is MaxTempMean12_23 calculating the mean Max temp for the following 11 days.
c(mean(df[12:22,7]), df[1,18]) #manually calculated mean matches MaxTempMean12_23
#Create MaxTemp column that is 22 days ahead
df$leadMax23_33 <- dplyr::lead(df$MaxTemp, n = 22)
df$MaxTempMean23_33 <- zoo::rollapply(df$leadMax23_33, width=11, FUN=mean, align = 'left', fill = NA, partial = TRUE, na.rm = TRUE)
#Code check: Is MaxTempMean12_23 calculating the mean Max temp for the following 11 days.
c(mean(df[13:33,7]), df[1,20]) #manually calculated mean matches MaxTempMean12_23
#Code check: Is MaxTempMean12_23 calculating the mean Max temp for the following 11 days.
c(mean(df[23:33,7]), df[1,20]) #manually calculated mean matches MaxTempMean12_23
#Create MaxTemp column that is 33 days ahead
df$leadMax33_43 <- dplyr::lead(df$MaxTemp, n = 33)
df$MaxTempMean33_43 <- zoo::rollapply(df$leadMax33_43, width=11, FUN=mean, align = 'left', fill = NA, partial = TRUE, na.rm = TRUE)
#Code check: Is MaxTempMean33_43 calculating the mean Max temp for the fourth window of 11 days.
c(mean(df[33:43,7]), df[1,22]) #manually calculated mean matches MaxTempMean33_43
#Code check: Is MaxTempMean33_43 calculating the mean Max temp for the fourth window of 11 days.
c(mean(df[34:43,7]), df[1,22]) #manually calculated mean matches MaxTempMean33_43
library(tidyverse)
library(dplyr)
library(zoo)
df <- read.csv("IthacaWeatherData1990_2020.csv", h=TRUE)
#coerce climate variables to class numeric
df$MaxTemp <- as.numeric(df$MaxTemp)
df$Precip <- as.numeric(df$Precip)
df$HDD <- as.numeric(df$HDD)
View(df)
#create columns to contain mean MaxTemp for 11 day rolling windows for each julian day
df$MaxTempMean1_11 <- zoo::rollapply(df$MaxTemp, width=11, FUN=mean, align = 'left', fill = NA, partial = TRUE, na.rm = TRUE)
#Code check: Is MaxTempMean1_11 calculating the mean Max temp for the following 11 days.
c(mean(df[1:11,7]), df[1,16]) #manually calculated mean matches MaxTempMean1_11
#Create MaxTemp column that is 11 days ahead
df$MaxTempMean12_22 <- dplyr::lead(df$MaxTempMean1_11, n = 11)
#Code check: Is MaxTempMean12_22 calculating the mean Max temp for the second window of 11 days.
c(mean(df[12:22,7]), df[1,17]) #manually calculated mean matches MaxTempMean12_22
#Create MaxTemp column that is 22 days ahead
df$MaxTempMean23_33 <- dplyr::lead(df$MaxTempMean12_22, n = 11)
#Code check: Is MaxTempMean23_33 calculating the mean Max temp for the third window of 11 days.
c(mean(df[23:33,7]), df[1,20]) #manually calculated mean matches MaxTempMean23_33
#Code check: Is MaxTempMean23_33 calculating the mean Max temp for the third window of 11 days.
c(mean(df[23:33,7]), df[1,18]) #manually calculated mean matches MaxTempMean23_33
#Create MaxTemp column that is 33 days ahead
df$leadMax34_44 <- dplyr::lead(df$MaxTempMean23_33, n = 11)
#Code check: Is MaxTempMean33_43 calculating the mean Max temp for the fourth window of 11 days.
c(mean(df[33:43,7]), df[1,19]) #manually calculated mean matches MaxTempMean33_43
#Code check: Is MaxTempMean33_43 calculating the mean Max temp for the fourth window of 11 days.
c(mean(df[34:44,7]), df[1,19]) #manually calculated mean matches MaxTempMean33_43
library(tidyverse)
library(dplyr)
library(zoo)
df <- read.csv("IthacaWeatherData1990_2020.csv", h=TRUE)
#coerce climate variables to class numeric
df$MaxTemp <- as.numeric(df$MaxTemp)
df$Precip <- as.numeric(df$Precip)
df$HDD <- as.numeric(df$HDD)
df$CDD <- as.numeric(df$CDD)
df$GDD <- as.numeric(df$GDD)
?zoo::rollapply()
#An 11-day rolling window calculates the mean of MaxTemp for the next 11 days
df$MaxTempMean1_11 <- zoo::rollapply(df$MaxTemp, width=11, FUN=mean, align = 'left', fill = NA, partial = TRUE, na.rm = TRUE)
#Code check
c(mean(df[1:11,7]), df[1,16]) #mean() calculation should match MaxTempMean1_11
#zoo::rollapply(): align = 'left' applies to the succeeding days, while align = 'right' applies to the preceding days
?zoo::rollapply()
#An 11-day rolling window calculates the mean of MaxTemp for the next 11 days
df$MaxTempMean1_11 <- zoo::rollapply(df$MaxTemp, width=11, FUN=mean, align = 'left', fill = NA, partial = TRUE, na.rm = TRUE)
#Code check
c(mean(df[1:11,7]), df[1,16]) #mean() calculation should match MaxTempMean1_11
View(df)
#Code check
df[1:11,7]
c(mean(df[1:11,7]), df[1,16]) #mean() calculation should match MaxTempMean1_11
#Code check
c(df[1:11,7], mean(df[1:11,7]),df[1,16]) #mean() calculation should match MaxTempMean1_11
#Code check
tibble(values=df[1:11,7], means=mean(df[1:11,7]),df[1,16]) #mean() calculation should match MaxTempMean1_11
#Code check
tibble(values=df[1:11,7])means=mean(df[1:11,7]),df[1,16]) #mean() calculation should match MaxTempMean1_11
#Code check
tibble(tibble(values=df[1:11,7]), means=mean(df[1:11,7]),df[1,16]) #mean() calculation should match MaxTempMean1_11
#Code check
tibble(tibble(values=df[1:11,7]))
tibble(means=mean(df[1:11,7]),df[1,16]) #mean() calculation should match MaxTempMean1_11
#Code check
tibble(tibble(values=df[1:11,7]))
tibble(mean=mean(df[1:11,7]),metric=df[1,16]) #mean() calculation should match MaxTempMean1_11
#Code check
print(tibble(values=df[1:11,7]))
print(tibble(mean=mean(df[1:11,7]),metric=df[1,16])) #mean() calculation should match MaxTempMean1_11
#Code check
tibble(list(tibble(values=df[1:11,7]),tibble(mean=mean(df[1:11,7]),metric=df[1,16])))
#Code check
knitr::kable(list(tibble(values=df[1:11,7]),tibble(mean=mean(df[1:11,7]),metric=df[1,16])))
#zoo::rollapply(): align = 'left' applies to the succeeding days, while align = 'right' applies to the preceding days
?zoo::rollapply()
#An 11-day rolling window calculates the mean of MaxTemp for the next 11 days
df$MaxTempMean1_11 <- zoo::rollapply(df$MaxTemp, width=11, FUN=mean, align = 'left', fill = NA, partial = TRUE, na.rm = TRUE)
#Code check
knitr::kable(list(tibble(mean=mean(df[1:11,7]),metric=df[1,16]),tibble(values=df[1:11,7])))
print() #mean() calculation should match MaxTempMean1_11
#Code check
knitr::kable(list(tibble(mean=mean(df[1:11,7]),
metric=df[1,16]),
tibble(values=df[1:11,7])))
#Code check
knitr::kable(list(tibble(mean=mean(df[1:11,7]),
metric=df[1,16]),
list(df[1:11,7])))
#zoo::rollapply(): align = 'left' applies to the succeeding days, while align = 'right' applies to the preceding days
?zoo::rollapply()
#An 11-day rolling window calculates the mean of MaxTemp for the next 11 days
df$MaxTempMean1_11 <- zoo::rollapply(df$MaxTemp, width=11, FUN=mean, align = 'left', fill = NA, partial = TRUE, na.rm = TRUE)
#Code check
knitr::kable(list(tibble(mean=mean(df[1:11,7]),
metric=df[1,16]),
tibble(values=df[1:11,7])))
#mean() calculation should match metric
print(df[12:22,7]))
print(df[12:22,7])
#MaxTempMean for days 12-22
df$MaxTempMean12_22 <- dplyr::lead(df$MaxTempMean1_11, n = 11)
#Code check
c(mean(df[12:22,7]), df[1,17]) #mean() calculation should match MaxTempMean12_22
#Code check
tibble(mean=mean(df[12:22,7]), metric=df[1,17]) #mean() calculation should match Metric
#Code check
print(mean=mean(df[12:22,7]), metric=df[1,17]) #mean() calculation should match Metric
#Code check
tibble(mean=mean(df[12:22,7]), metric=df[1,17]) #mean() calculation should match Metric
#Code check
c(mean=mean(df[12:22,7]), metric=df[1,17]) #mean() calculation should match Metric
c(df[12:22,7])#
c(values =df[12:22,7])#
c(value =df[12:22,7])#
print(df[12:22,7])#
#zoo::rollapply(): align = 'left' applies to the succeeding days, while align = 'right' applies to the preceding days
?zoo::rollapply()
#An 11-day rolling window calculates the mean of MaxTemp for the next 11 days
df$MaxTempMean1_11 <- zoo::rollapply(df$MaxTemp, width=11, FUN=mean, align = 'left', fill = NA, partial = TRUE, na.rm = TRUE)
#Code check
c(mean=mean(df[1:11,7]),metric=df[1,16]),
#Code check
c(mean=mean(df[1:11,7]),metric=df[1,16])
print(values=df[1:11,7])
print(df[1:11,7])
#MaxTempMean for days 12-22
df$MaxTempMean12_22 <- dplyr::lead(df$MaxTempMean1_11, n = 11)
#Code check
c(mean=mean(df[12:22,7]), metric=df[1,17]) #mean() calculation should match metric
print(df[12:22,7])#
#MaxTempMean for days 23-33
df$MaxTempMean23_33 <- dplyr::lead(df$MaxTempMean12_22, n = 11)
#Code check
c(mean=mean(df[23:33,7]), metric=df[1,18])#mean() calculation should match metric
#MaxTempMean for days 23-33
df$MaxTempMean23_33 <- dplyr::lead(df$MaxTempMean12_22, n = 11)
#Code check
c(mean=mean(df[23:33,7]), metric=df[1,18])#mean() calculation should match metric
print(df[23:33,7])#11 values
print(df[34:44,7])
#MaxTempMean for days 34-44
df$leadMax34_44 <- dplyr::lead(df$MaxTempMean23_33, n = 11)
#Code check
c(mean=mean(df[34:44,7]), metric=df[1,19])#mean() calculation should match metric
print(df[34:44,7])#11 values
print(df[1:19,7])
#MaxTemp mean for 19 days prior to hatch date
df$MeanMaxTempIncubation <- zoo::rollapply(df$MaxTemp, width=19, FUN=mean, align = 'right', fill = NA, partial = TRUE, na.rm = TRUE)
#Code check
c(mean=mean(df[1:19,7]), metric=df[19,20]) #mean() calculation should match metric
df$PrecipSum1_11 <- zoo::rollapply(df$Precip, width=11, FUN=sum, align = 'left', fill = NA, partial = TRUE, na.rm = TRUE)
#Code check
c(sum=sum(df[1:11,10], na.rm = TRUE), metric=df[1,21]) #sum() calculation should match metric
print(df[1:11,10])#11 values)
#PrecipSum column that is 11 days ahead
df$PrecipSum12_22 <- dplyr::lead(df$PrecipSum1_11, n = 11)
#Code check
c(sum(df[12:22,10], na.rm = TRUE), df[1,22]) #sum() calculation should match PrecipSum12_22
#PrecipSum column that is 11 days ahead
df$PrecipSum12_22 <- dplyr::lead(df$PrecipSum1_11, n = 11)
#Code check
c(sum(sum=df[12:22,10], na.rm = TRUE), metric=df[1,22]) #sum() calculation should match metric
#PrecipSum column that is 11 days ahead
df$PrecipSum12_22 <- dplyr::lead(df$PrecipSum1_11, n = 11)
#Code check
c(sum=sum(df[12:22,10], na.rm = TRUE), metric=df[1,22]) #sum() calculation should match metric
print(df[12:22,10])
#PrecipSum column that is 22 days ahead
df$PrecipSum23_33 <- dplyr::lead(df$PrecipSum12_22, n = 11)
#Code check
c(sum=sum(df[23:33,10], na.rm = TRUE), metric=df[1,23]) #sum() calculation should match metric
print(df[23:33,10])#11 values
#Code check
c(sum=sum(df[34:44,10]), metric=df[1,24]) #sum() calculation should match metric
print(df[34:44,10])
print(df[11:29,10])#19 values
#Code check
c(sum=sum(df[11:29,10], na.rm = TRUE), metric=df[29,25]) #sum() calculation should match metric
#PrecipSum column that is 33 days ahead
>>>>>>> fcb1e7b78be935a078ec7e02aba222a5352dbe60
df$PrecipSum34_44 <- dplyr::lead(df$PrecipSum23_33, n = 11)
#Code check
c(sum=sum(df[34:44,10]), metric=df[1,24]) #sum() calculation should match metric
#PrecipSum column that looks back 19 days from hatch date
df$PrecipSumIncubation <- zoo::rollapply(df$Precip, width=19, FUN=sum, align = 'right', fill = NA, partial = TRUE, na.rm = TRUE)
#Code check
c(sum=sum(df[11:29,10], na.rm = TRUE), metric=df[29,24]) #sum() calculation should match metric
#PrecipSum column that looks back 19 days from hatch date
df$PrecipSumIncubation <- zoo::rollapply(df$Precip, width=19, FUN=sum, align = 'right', fill = NA, partial = TRUE, na.rm = TRUE)
#Code check
c(sum=sum(df[11:29,10], na.rm = TRUE), metric=df[29,25]) #sum() calculation should match metric
print(df[11:29,10])#19 values
View(df)
#PrecipSum column that looks back 19 days from hatch date
df$PrecipSumIncubation <- zoo::rollapply(df$Precip, width=19, FUN=sum, align = 'right', fill = NA, partial = TRUE, na.rm = TRUE)
#Code check
c(sum=sum(df[1:11,15], na.rm = TRUE), metric=df[1,26]) #sum() calculation should match metric
df$GDDSum1_11 <- zoo::rollapply(df$GDD, width=11, FUN=sum, align = 'left', fill = NA, partial = TRUE, na.rm = TRUE)
#Code check
c(sum=sum(df[11:29,10], na.rm = TRUE), metric=df[29,25]) #sum() calculation should match metric
#PrecipSum column that looks back 19 days from hatch date
df$PrecipSumIncubation <- zoo::rollapply(df$Precip, width=19, FUN=sum, align = 'right', fill = NA, partial = TRUE, na.rm = TRUE)
#Code check
c(sum=sum(df[1:11,10], na.rm = TRUE), metric=df[1,25]) #sum() calculation should match metric
#Code check
c(sum=sum(df[1:19,10], na.rm = TRUE), metric=df[19,25]) #sum() calculation should match metric
print(df[1:19,10])#19 values
#Code check
c(sum=sum(df[1:19,15], na.rm = TRUE), metric=df[19,25]) #sum() calculation should match metric
#Code check
c(sum=sum(df[1:19,15], na.rm = TRUE), metric=df[19,26]) #sum() calculation should match metric
#Code check
c(sum=sum(df[1:19,15], na.rm = TRUE), metric=df[1,26]) #sum() calculation should match metric
#Code check
c(sum=sum(df[1:11,15], na.rm = TRUE), metric=df[1,26]) #sum() calculation should match metric
#Code check
c(sum=sum(df[12:22,15], na.rm = TRUE), metric=df[12,26]) #sum() calculation should match metric
#Code check
c(sum=sum(df[112:122,15], na.rm = TRUE), metric=df[122,26]) #sum() calculation should match metric
#Code check
c(sum=sum(df[112:122,15], na.rm = TRUE), metric=df[112,26]) #sum() calculation should match metric
print(df[112:122,15])
#GDDSum column that is 11 days ahead
df$GDDSum12_22 <- dplyr::lead(df$GDDSum1_11, n = 11)
#Code check
c(sum=sum(df[12:22,15], na.rm = TRUE), metric=df[1,27]) #sum() calculation should match metric
print(df[12:22,10])
print(df[12:22,15])
#Code check
c(sum=sum(df[14:24,15], na.rm = TRUE), metric=df[3,27]) #sum() calculation should match metric
print(df[14:24,15])
#Code check
c(sum=sum(df[12:22,15], na.rm = TRUE), metric=df[1,27]) #sum() calculation should match metric
#GDDSum column that is 11 days ahead
df$GDDSum12_22 <- dplyr::lead(df$GDDSum1_11, n = 11)
#Code check
c(sum=sum(df[66:77,15], na.rm = TRUE), metric=df[55,27]) #sum() calculation should match metric
#Code check
c(sum=sum(df[66:76,15], na.rm = TRUE), metric=df[55,27]) #sum() calculation should match metric
print(df[66:76,15])
#GDDSum column that is 22 days ahead
df$GDDSum23_33 <- dplyr::lead(df$GDDSum12_22, n = 11)
#Code check
c(sum=sum(df[66:76,15], na.rm = TRUE), metric=df[44,28]) #sum() calculation should match metric
#GDDSum column that is 22 days ahead
df$GDDSum23_33 <- dplyr::lead(df$GDDSum12_22, n = 11)
#Code check
c(sum=sum(df[66:76,15], na.rm = TRUE), metric=df[44,28]) #sum() calculation should match metric
#GDDSum column that is 33 days ahead
df$GDDSum34_44 <- dplyr::lead(df$GDDSum23_33, n = 11)
#Code check
c(sum=sum(df[66:76,15], na.rm = TRUE), metric=df[33,29]) #sum() calculation should match metric
#GDDSum for the 19 days preceding hatch date
df$GDDSumIncubation <- zoo::rollapply(df$HDD, width=19, FUN=sum, align = 'right', fill = NA, partial = TRUE, na.rm = TRUE)
#GDDSum for the 19 days preceding hatch date
df$GDDSumIncubation <- zoo::rollapply(df$GDD, width=19, FUN=sum, align = 'right', fill = NA, partial = TRUE, na.rm = TRUE)
#GDDSum for the 19 days preceding hatch date
df$GDDSumIncubation <- zoo::rollapply(df$GDD, width=19, FUN=sum, align = 'right', fill = NA, partial = TRUE, na.rm = TRUE)
```{r}
#code check
c(sum=sum(df[111:129,15], na.rm = TRUE), metric=df[129,30]) #sum() should match metric
print(df[111:129,15])
#GDDSum for the 19 days preceding hatch date
df$GDDSumIncubation <- zoo::rollapply(df$GDD, width=19, FUN=sum, align = 'right', fill = NA, partial = TRUE, na.rm = TRUE)
#code check
c(sum=sum(df[111:129,15], na.rm = TRUE), metric=df[129,30]) #sum() should match metric
print(df[111:129,15])#19 values
#CDDSum column the first 11 days
df$CDDSum1_11 <- zoo::rollapply(df$CDD, width=11, FUN=sum, align = 'left', fill = NA, partial = TRUE, na.rm = TRUE)
#Code check
c(sum=sum(df[112:122,14], na.rm = TRUE), metric=df[112,31]) #sum() calculation should match metric
print(df[112:122,14])#11 values
#CDDSum column that is 11 days ahead
df$CDDSum12_22 <- dplyr::lead(df$CDDSum1_11, n = 11)
#Code check
c(sum=sum(df[66:76,14], na.rm = TRUE), metric=df[55,32]) #sum() calculation should match metric
#Code check
c(sum=sum(df[66:76,14], na.rm = TRUE), metric=df[55,32]) #sum() calculation should match metric
```{r}
print(df[66:76,14])
#CDDSum column that is 22 days ahead
df$CDDSum23_33 <- dplyr::lead(df$CDDSum12_22, n = 11)
#Code check
c(sum=sum(df[66:76,14], na.rm = TRUE), metric=df[44,33]) #sum() calculation should match metric
#CDDSum column that is 33 days ahead
df$CDDSum34_44 <- dplyr::lead(df$CDDSum23_33, n = 11)
#Code check
c(sum=sum(df[66:76,14], na.rm = TRUE), metric=df[33,34]) #sum() should match metric
#CDDSum for the 19 days preceding hatch date
df$CDDSumIncubation <- zoo::rollapply(df$CDD, width=19, FUN=sum, align = 'right', fill = NA, partial = TRUE, na.rm = TRUE)
#code check
c(sum=sum(df[111:129,14], na.rm = TRUE), metric=df[129,35]) #sum() should match metric
print(df[111:129,14])#19 values
print(df[111:129,14])#19 values
View(df)
#New dataframe with the derived climate metrics
ClimateMetrics.df <- as.data.frame(df[60:11514,c(1:7,10,14-35)])
#New dataframe with the derived climate metrics
ClimateMetrics.df <- as.data.frame(df[60:11514,c(1:7,10,14:35)])
View(ClimateMetrics.df)
write.csv(ClimateMetrics.df, "C:\\Users\\Justin Mann\\Documents\\RProjects\\CrowBase\\ClimateMetrics.csv",
row.names = FALSE)
<<<<<<< HEAD
#Both sexes
B.df <- read.csv("CrowNestlingClimate_BothSexesClean.csv",h=TRUE)
B.df$AllSex <- as.factor(B.df$AllSex)
summary(B.df)
B.factors.df <- B.df[,1:5]
B.scaled.df <- scale(B.df[,6:27])
B.scaled.df <- cbind(B.factors.df,B.scaled.df)
View(B.scaled.df)
#Both sexes
B.df <- read.csv("CrowNestlingClimate_BothSexesClean.csv",h=TRUE)
B.df$AllSex <- as.factor(B.df$AllSex)
summary(B.df)
B.df$BDbyWeight <- B.df$BillDepth/B.df$Weight
B.df$BDbyWeight <- B.df$BillDepth/B.df$Weight
B.df$UBbyWeight <- B.df$UB/B.df$Weight
B.df$UBSbyWeight <- B.df$UBS/B.df$Weight
B.df$TBSbyWeight <- B.df$TBS/B.df$Weight
B.df$TarsusbyWeight <- B.df$Tarsus/B.df$Weight
View(B.df)
?scale()
View(B.df)
B.factors.df <- B.df[,1:5]
View(B.factors.df)
B.scaled.df <- scale(B.df[,6:32])
View(B.scaled.df)
View(B.scaled.df)
B.scaled.df <- cbind(B.factors.df,B.scaled.df)
t.test(B.df$UBSbyWeight[B.df$AllSex=="M"],B.df$UBSbyWeight[B.df$AllSex=="F"])
t.test(B.scaled.df$UBSbyWeight[B.scaled.df$AllSex=="M"],B.scaled.df$UBSbyWeight[B.scaled.df$AllSex=="F"])
t.test(B.scaled.df$BDbyWeight[B.scaled.df$AllSex=="M"],B.scaled.df$BDbyWeight[B.scaled.df$AllSex=="F"])
t.test(B.df$BDbyWeight[B.df$AllSex=="M"],B.df$BDbyWeight[B.df$AllSex=="F"])
t.test(B.df$BillDepth[B.df$AllSex=="M"],B.df$BillDepth[B.df$AllSex=="F"])
t.test(B.df$TarsusbyWeight[B.df$AllSex=="M"], B.df$TarsusbyWeight[B.df$AllSex=="F"])
t.test(B.df$Tarsus[B.df$AllSex=="M"], B.df$Tarsus[B.df$AllSex=="F"])
t.test(B.df$Weight[B.df$AllSex=="M"], B.df$Weight[B.df$AllSex=="F"])
BDByWeightGDD.plot <- ggplot(data = B.df, aes(x=GDDSum12_22, y=BDbyWeight, color=AllSex))+
>>>>>>> d51fafc0b7b9c2f2622737c5b7269ad2056891e7
geom_point(size = 1.2)+
geom_smooth()+
scale_color_manual(values = c("#009E73","#E69F00"), labels = c("Female","Male"))+
labs(color = "Sex")+
ylab("Weight")+
xlab("GDD")+
theme(plot.title = element_text(size = 22),
axis.text.x = element_text(size = 12),
axis.title.x = element_text(size = 14),
axis.text.y = element_text(size = 12),
axis.title.y = element_text(size = 14),
legend.position = "top",
plot.margin = margin(15,15,15,15))
ggplotly(WeightGDD.plot)
JulianGDD.plot <- ggplot(data = B.df, aes(x=HatchDateJulYear, y=GDDSum12_22, color=AllSex, label=ID))+
geom_point(size = 1.2)+
geom_smooth()+
scale_color_manual(values = c("#009E73","#E69F00"), labels = c("Female","Male"))+
labs(color = "Sex")+
ylab("GDD")+
xlab("Hatch Date")+
theme(plot.title = element_text(size = 22),
axis.text.x = element_text(size = 12),
axis.title.x = element_text(size = 14),
axis.text.y = element_text(size = 12),
axis.title.y = element_text(size = 14),
legend.position = "top",
plot.margin = margin(15,15,15,15))
ggplotly(JulianGDD.plot)
#cowplot::save_plot("WeightGDD.plot.png", WeightGDD.plot)
BDGDD.plot <- ggplot(data = B.df, aes(x=GDDSum12_22, y=BillDepth, color=AllSex))+
geom_boxplot()+
#geom_smooth()+
scale_color_manual(values = c("#009E73","#E69F00"), labels = c("Female","Male"))+
labs(color = "Sex")+
ylab("Bill Depth")+
xlab("GDD")+
theme(plot.title = element_text(size = 22),
axis.text.x = element_text(size = 12),
axis.title.x = element_text(size = 14),
axis.text.y = element_text(size = 12),
axis.title.y = element_text(size = 14),
legend.position = "top",
plot.margin = margin(15,15,15,15))
BDGDD.plot
BDGDD.plot <- ggplot(data = B.df, aes(x=GDDSum12_22, y=BillDepth, color=AllSex))+
geom_boxplot()+
#geom_smooth()+
scale_color_manual(values = c("#009E73","#E69F00"), labels = c("Female","Male"))+
labs(color = "Sex")+
ylab("Bill Depth")+
xlab("")+
theme(plot.title = element_text(size = 22),
axis.text.x = element_text(size = 12),
axis.title.x = element_text(size = 14),
axis.text.y = element_text(size = 12),
axis.title.y = element_text(size = 14),
legend.position = "top",
plot.margin = margin(15,15,15,15))
BDGDD.plot
#cowplot::save_plot("UBSByWeightGDD.plot.png", UBSByWeightGDD.plot)
t.test(B.df$BillDepth[B.df$AllSex=="M"], B.df$BillDepth[B.df$AllSex=="F"])
lm(data = B.df, BillDepth~Weight + AllSex + CalcAge)
summary(lm(data = B.df, BillDepth~Weight + AllSex + CalcAge))
summary(lm(data = B.scale.df, BillDepth~Weight + AllSex + CalcAge))
summary(lm(data = B.scaled.df, BillDepth~Weight + AllSex + CalcAge))
BD.mdl <-summary(lm(data = B.scaled.df, BillDepth~Weight + AllSex + CalcAge))
B.scaled.df$BDResids <- BD.mdl$residuals
t.test(B.scaled.df$BDResids[B.scaled.df$AllSex=="M"],B.scaled.df$BDResids[B.scaled.df$AllSex=="F"])
B.scaled.df$BDResids
hist(B.scaled.df$BDResids)
t.test(B.scaled.df$BDResids[B.scaled.df$AllSex=="M"],B.scaled.df$BDResids[B.scaled.df$AllSex=="F"])
B.scaled.df$BDResids
hist(B.scaled.df$BDResids)
t.test(B.scaled.df$BDResids[B.scaled.df$AllSex=="M"],B.scaled.df$BDResids[B.scaled.df$AllSex=="F"])
mean(B.scaled.df$BDResids[B.scaled.df$AllSex=="M"])
hist(B.scaled.df$BDResids)
t.test(B.scaled.df$BDResids[B.scaled.df$AllSex=="M"],B.scaled.df$BDResids[B.scaled.df$AllSex=="F"])
mean(B.scaled.df$BDResids[B.scaled.df$AllSex=="M"])
t.test(B.scaled.df$BDResids[B.scaled.df$AllSex=="M"],B.scaled.df$BDResids[B.scaled.df$AllSex=="F"])
hist(B.scaled.df$BDResids)
t.test(B.scaled.df$BDResids[B.scaled.df$AllSex=="M"],B.scaled.df$BDResids[B.scaled.df$AllSex=="F"])
hist(B.scaled.df$BDResids)
range(B.scaled.df$BDResids[B.scaled.df$AllSex=="M"])
ggplot(data = B.scaled.df, aes(x=BDResids,fill=AllSex))+
geom_histogram()
ggplot(data = B.scaled.df, aes(x=BDResids,fill=AllSex))+
geom_histogram()+
theme(plot.title = element_text(size = 22),
axis.text.x = element_text(size = 12),
axis.title.x = element_text(size = 14),
axis.text.y = element_text(size = 12),
axis.title.y = element_text(size = 14),
legend.position = "top",
plot.margin = margin(15,15,15,15))
ggplot(data = B.scaled.df, aes(x=BDResids,fill=AllSex))+
geom_histogram()+
scale_color_manual(values = c("#009E73","#E69F00"), labels = c("Female","Male"))+
theme(plot.title = element_text(size = 22),
axis.text.x = element_text(size = 12),
axis.title.x = element_text(size = 14),
axis.text.y = element_text(size = 12),
axis.title.y = element_text(size = 14),
legend.position = "top",
plot.margin = margin(15,15,15,15))
ggplot(data = B.scaled.df, aes(x=BDResids,fill=AllSex))+
geom_histogram()+
scale_fill_manual(values = c("#009E73","#E69F00"), labels = c("Female","Male"))+
theme(plot.title = element_text(size = 22),
axis.text.x = element_text(size = 12),
axis.title.x = element_text(size = 14),
axis.text.y = element_text(size = 12),
axis.title.y = element_text(size = 14),
legend.position = "top",
>>>>>>> 999ee12bea4ebd7e48f8263847332aab5717f806
plot.margin = margin(15,15,15,15))
Tarsus.mdl <-summary(lm(data = B.scaled.df, Tarsus~Weight + AllSex + CalcAge))
B.scaled.df$TarsusResids <- Tarsus.mdl$residuals
t.test(B.scaled.df$TarsusResids[B.scaled.df$AllSex=="M"],B.scaled.df$TarsusResids[B.scaled.df$AllSex=="F"])
ggplot(data = B.scaled.df, aes(x=TarsusResids,fill=AllSex))+
geom_histogram()+
scale_fill_manual(values = c("#009E73","#E69F00"), labels = c("Female","Male"))+
theme(plot.title = element_text(size = 22),
axis.text.x = element_text(size = 12),
axis.title.x = element_text(size = 14),
axis.text.y = element_text(size = 12),
axis.title.y = element_text(size = 14),
legend.position = "top",
plot.margin = margin(15,15,15,15))
View(B.df)
<<<<<<< HEAD
library(tidyverse)
library(dplyr)
library(asnipe)
#converts our data in 'asnipe' format data
group_maker <- function(x){
g1 <- ids$id1[obs[,x]> 0]
g2 <- ids$id2[obs[,x]> 0]
temp <- c(g1,g2)
temp <- temp[!duplicated(temp)]
paste(temp)
}
#Read in our data data
df <- read.csv("GlobalFicrSocNet.csv", sep = ",", header=TRUE, check.names = F)
#Replace NAs with 0
df[is.na(df)] <- 0
df <- read.csv("IthacaWeatherData1989-2020.csv", h=TRUE)
library(tidyverse)
library(tidyverse)
library(dplyr)
library(zoo)
View(df)
df <- read.csv("IthacaWeatherData1989-2020.csv", h=TRUE)
df <- df %>%
rename(MaxTemp=MaxTemperature,MinTemp=MinTemperature,Precip=Precipitation)
select(Date,HatchDateJulYear,MaxTemp,MinTemp,Precip,HDD,CDD,GDD)
df <- df %>%
rename(MaxTemp=MaxTemperature,MinTemp=MinTemperature,Precip=Precipitation),
df <- df %>%
rename(MaxTemp=MaxTemperature,MinTemp=MinTemperature,Precip=Precipitation) %>%
select(Date,HatchDateJulYear,MaxTemp,MinTemp,Precip,HDD,CDD,GDD)
df <- read.csv("IthacaWeatherData1989-2020.csv", h=TRUE)
df <- df %>%
rename(MaxTemp=MaxTemperature,MinTemp=MinTemperature,Precip=Precipitation) %>%
select(Date,HatchDateJulYear,MaxTemp,MinTemp,Precip,HDD,CDD,GDD)
#coerce climate variables to class numeric, NAs introduced where missing data were coded as characters
df$MaxTemp <- as.numeric(df$MaxTemp)
df$MinTemp <- as.numeric(df$MinTemp)
df$Precip <- as.numeric(df$Precip)
df$HDD <- as.numeric(df$HDD)
df$CDD <- as.numeric(df$CDD)
df$GDD <- as.numeric(df$GDD)
f2c <- function(x){
x <- (5/9) * (x-32)
return(x)
}
f2c(42)#first MaxTemp = 5.555C
df$MaxTempC <- mapply(f2c, df$MaxTemp)
df$MinTempC <- mapply(f2c, df$MinTemp)
in2cm <- function(x){
x <- x * 2.54
return(x)
}
in2cm(0.07)#first precip amount = 0.1778 cm
df$PrecipCM <- mapply(in2cm, df$Precip)
df <- df %>%
select(Date,HatchDateJulYear,MaxTempC,MinTempC,
PrecipCM,HDD,CDD,GDD)
#zoo::rollapply(): align = 'left' applies to the succeeding days, while align = 'right' applies to the preceding days
?zoo::rollapply()
#An 11-day rolling window calculates the mean of MaxTemp for the next 11 days
df$MaxTempMean1_11 <- zoo::rollapply(df$MaxTempC, width=11, FUN=mean, align = 'left', fill = NA, partial = TRUE, na.rm = TRUE)
#Code check
c(mean=mean(df[1:11,7]),metric=df[1,16])
#Code check
c(mean=mean(df[1:11,7]),metric=df[1,16])
View(df)
View(df)
#Code check
c(mean=mean(df[1:11,3]),metric=df[1,9])
#MaxTempMean for days 12-22
df$MaxTempMean12_22 <- dplyr::lead(df$MaxTempMean1_11, n = 11)
#Code check
c(mean=mean(df[12:22,3]), metric=df[1,10])#mean() calculation should match metric
print(df[12:22,7])#11 values
print(df[12:22,3])#11 values
#MaxTemp mean for 19 days prior to hatch date
df$MeanMaxTempIncubation <- zoo::rollapply(df$MaxTempC, width=19, FUN=mean, align = 'right', fill = NA, partial = TRUE, na.rm = TRUE)
#Code check
c(mean=mean(df[1:19,3]), metric=df[19,11]) #mean() calculation should match metric
print(df[1:19,3])#19 values
#An 11-day rolling window calculates the mean of MinTemp for the next 11 days
df$MinTempMean1_11 <- zoo::rollapply(df$MinTempC, width=11, FUN=mean, align = 'left', fill = NA, partial = TRUE, na.rm = TRUE)
#Code check
c(mean=mean(df[1:11,4]),metric=df[1,12])
#MaxTempMean for days 12-22
df$MinTempMean12_22 <- dplyr::lead(df$MinTempMean1_11, n = 11)
#Code check
c(mean=mean(df[12:22,4]), metric=df[1,13])#mean() calculation should match metric
#MaxTemp mean for 19 days prior to hatch date
df$MeanMinTempIncubation <- zoo::rollapply(df$MinTempC, width=19, FUN=mean, align = 'right', fill = NA, partial = TRUE, na.rm = TRUE)
#Code check
c(mean=mean(df[1:19,4]), metric=df[19,14]) #mean() calculation should match metric
df$PrecipSum1_11 <- zoo::rollapply(df$PrecipCM, width=11, FUN=sum, align = 'left', fill = NA, partial = TRUE, na.rm = TRUE)
#Code check
c(sum=sum(df[1:11,5], na.rm = TRUE), metric=df[1,15]) #sum() calculation should match metric
#PrecipSum column that is 11 days ahead
df$PrecipSum12_22 <- dplyr::lead(df$PrecipSum1_11, n = 11)
#Code check
c(sum=sum(df[12:22,5], na.rm = TRUE), metric=df[1,16]) #sum() calculation should match metric
=======
=======
>>>>>>> e71a7dcc4a760bde4c90604e7f49aca36a46b687
<<<<<<< HEAD
library(tidyverse)
library(dplyr)
library(broom) #tidy() to create tibbles from model summaries
library(car) #vif
library(cowplot)
library(lme4) #frequentist models
library(sjPlot) #plot_model & tab_model (blue = #377EB8)
library(ggpubr) #ggarrange
library(glmmTMB) #zi & overdispersed models
library(lmerTest) #lmerTest::step
library(ggeffects) #ggpredict
#PACKAGES FOR BAYESIAN MODELS
# library(rstanarm) #stan models
# library(shinystan) #stan model evaluation
#launch_shinystan_demo()
# library(loo) #use loo() to compare fits between bayesian models
library(plotly)
library(MuMIn) #dredge() for unsupervised model selection
library(AICcmodavg) #aictab() for AICc model comparisons
library(DHARMa)
theme_set(theme_classic())
#Both sexes
B.df <- read.csv("CrowNestlingClimate_BothSexesClean.csv",h=TRUE)
B.df$AllSex <- as.factor(B.df$AllSex)
summary(B.df)
B.df$BDbyWeight <- B.df$BillDepth/B.df$Weight
B.df$UBbyWeight <- B.df$UB/B.df$Weight
B.df$UBSbyWeight <- B.df$UBS/B.df$Weight
B.df$TBSbyWeight <- B.df$TBS/B.df$Weight
B.df$TarsusbyWeight <- B.df$Tarsus/B.df$Weight
?scale()
B.factors.df <- B.df[,1:5]
B.scaled.df <- scale(B.df[,6:32])
B.scaled.df <- cbind(B.factors.df,B.scaled.df)
#Males
M.df <- subset(B.df, AllSex=="M")
M.scaled.df <- subset(B.scaled.df, AllSex=="M")
#Females
F.df <- subset(B.df, AllSex=="F")
F.scaled.df <- subset(B.scaled.df, AllSex=="F")
BDResids <- lm(data = B.scaled.df, BillDepth ~ Weight + CalcAge)
BDResids.mdl <- lm(data = B.scaled.df, BillDepth ~ Weight + CalcAge)
B.scaled.df$BDResids <- BDResids.mdl$residuals
hist(BDResids)
hist(B.scaled.df$BDResids)
ggplot(data = B.scaled.df, aes(x=BDResids))+
geom_histogram()
ggplot(data = B.scaled.df, aes(x=BDResids, color = AllSex))+
geom_histogram()
ggplot(data = B.scaled.df, aes(x=BDResids, fill = AllSex))+
geom_histogram()+
scale_fill_manual(values = c("#009E73","#E69F00"), labels = c("Female","Male"))
t.test(B.scaled.df$BDResids[B.scaled.df$AllSex=="M"],B.scaled.df$BDResids[B.scaled.df$AllSex=="F"])
UBSResids.mdl <- lm(data = B.scaled.df, UBS ~ Weight + CalcAge)
B.scaled.df$UBSResids <- UBSResids.mdl$residuals
ggplot(data = B.scaled.df, aes(x=UBSResids, fill = AllSex))+
geom_histogram()+
scale_fill_manual(values = c("#009E73","#E69F00"), labels = c("Female","Male"))
t.test(B.scaled.df$UBSResids[B.scaled.df$AllSex=="M"],B.scaled.df$UBSResids[B.scaled.df$AllSex=="F"])
BDResidsSex.mdl <- lm(data = B.scaled.df, BillDepth ~ Weight + CalcAge + AllSex)
library(tidyverse)
library(dplyr)
library(broom) #tidy() to create tibbles from model summaries
library(car) #vif
library(cowplot)
library(lme4) #frequentist models
library(sjPlot) #plot_model & tab_model (blue = #377EB8)
library(ggpubr) #ggarrange
library(glmmTMB) #zi & overdispersed models
library(lmerTest) #lmerTest::step
library(ggeffects) #ggpredict
#PACKAGES FOR BAYESIAN MODELS
# library(rstanarm) #stan models
# library(shinystan) #stan model evaluation
#launch_shinystan_demo()
# library(loo) #use loo() to compare fits between bayesian models
library(plotly)
library(MuMIn) #dredge() for unsupervised model selection
library(AICcmodavg) #aictab() for AICc model comparisons
library(DHARMa)
theme_set(theme_classic())
#Both sexes
B.df <- read.csv("CrowNestlingClimate_BothSexesClean.csv",h=TRUE)
B.df$AllSex <- as.factor(B.df$AllSex)
summary(B.df)
B.df$BDbyWeight <- B.df$BillDepth/B.df$Weight
B.df$UBbyWeight <- B.df$UB/B.df$Weight
B.df$UBSbyWeight <- B.df$UBS/B.df$Weight
B.df$TBSbyWeight <- B.df$TBS/B.df$Weight
B.df$TarsusbyWeight <- B.df$Tarsus/B.df$Weight
?scale()
B.factors.df <- B.df[,1:5]
B.scaled.df <- scale(B.df[,6:32])
B.scaled.df <- cbind(B.factors.df,B.scaled.df)
#Males
M.df <- subset(B.df, AllSex=="M")
M.scaled.df <- subset(B.scaled.df, AllSex=="M")
#Females
F.df <- subset(B.df, AllSex=="F")
F.scaled.df <- subset(B.scaled.df, AllSex=="F")
t.test(B.df$Weight[B.df$AllSex=="M"], B.df$Weight[B.df$AllSex=="F"])
t.test(B.df$UBSbyWeight[B.df$AllSex=="M"],B.df$UBSbyWeight[B.df$AllSex=="F"])
>>>>>>> 746cf944c1645d9a6082d8e3a3b7470ab10ef657
t.test(B.scaled.df$UBSbyWeight[B.scaled.df$AllSex=="M"],B.scaled.df$UBSbyWeight[B.scaled.df$AllSex=="F"])
t.test(B.df$BDbyWeight[B.df$AllSex=="M"],B.df$BDbyWeight[B.df$AllSex=="F"])
t.test(B.scaled.df$BillDepth[B.scaled.df$AllSex=="M"],B.scaled.df$BillDepth[B.scaled.df$AllSex=="F"])
t.test(B.df$UBbyWeight[B.df$AllSex=="M"],B.df$UBbyWeight[B.df$AllSex=="F"])
t.test(B.df$TBSbyWeight[B.df$AllSex=="M"],B.df$TBSbyWeight[B.df$AllSex=="F"])
t.test(B.df$Tarsus[B.df$AllSex=="M"], B.df$Tarsus[B.df$AllSex=="F"])
UBSByWeightGDD.plot <- ggplot(data = B.df, aes(x=GDDSum12_22, y=UBSbyWeight, color=AllSex))+
geom_point(size = 1.2)+
geom_smooth()+
scale_color_manual(values = c("#009E73","#E69F00"), labels = c("Female","Male"))+
labs(color = "Sex")+
ylab("UBS/Weight Ratio")+
xlab("GDD")+
theme(plot.title = element_text(size = 22),
axis.text.x = element_text(size = 12),
axis.title.x = element_text(size = 14),
axis.text.y = element_text(size = 12),
axis.title.y = element_text(size = 14),
legend.position = "top",
plot.margin = margin(15,15,15,15))
UBSByWeightGDD.plot
#cowplot::save_plot("UBSByWeightGDD.plot.png", UBSByWeightGDD.plot)
BDByWeightGDD.plot <- ggplot(data = B.df, aes(x=GDDSum12_22, y=BDbyWeight, color=AllSex))+
geom_point(size = 1.2)+
geom_smooth()+
scale_color_manual(values = c("#009E73","#E69F00"), labels = c("Female","Male"))+
labs(color = "Sex")+
ylab("BD/Weight Ratio")+
xlab("GDD")+
theme(plot.title = element_text(size = 22),
axis.text.x = element_text(size = 12),
axis.title.x = element_text(size = 14),
axis.text.y = element_text(size = 12),
axis.title.y = element_text(size = 14),
legend.position = "top",
plot.margin = margin(15,15,15,15))
BDByWeightGDD.plot
cowplot::save_plot("BDByWeightGDD.plot.png", BDByWeightGDD.plot)
BDGDD.plot <- ggplot(data = B.df, aes(x=GDDSum12_22, y=BillDepth, color=AllSex))+
geom_point(size = 1.2)+
geom_smooth()+
scale_color_manual(values = c("#009E73","#E69F00"), labels = c("Female","Male"))+
labs(color = "Sex")+
ylab("Bill Depth")+
xlab("GDD")+
theme(plot.title = element_text(size = 22),
axis.text.x = element_text(size = 12),
axis.title.x = element_text(size = 14),
axis.text.y = element_text(size = 12),
axis.title.y = element_text(size = 14),
legend.position = "top",
plot.margin = margin(15,15,15,15))
BDGDD.plot
#cowplot::save_plot("UBSByWeightGDD.plot.png", UBSByWeightGDD.plot)
WeightGDD.plot <- ggplot(data = B.df, aes(x=GDDSum12_22, y=Weight, color=AllSex))+
geom_point(size = 1.2)+
geom_smooth()+
scale_color_manual(values = c("#009E73","#E69F00"), labels = c("Female","Male"))+
labs(color = "Sex")+
ylab("Weight")+
xlab("GDD")+
theme(plot.title = element_text(size = 22),
axis.text.x = element_text(size = 12),
axis.title.x = element_text(size = 14),
axis.text.y = element_text(size = 12),
axis.title.y = element_text(size = 14),
legend.position = "top",
plot.margin = margin(15,15,15,15))
WeightGDD.plot
#cowplot::save_plot("WeightGDD.plot.png", WeightGDD.plot)
WeightPrecip.plot <- ggplot(data = B.df, aes(x=PrecipSum12_22, y=Weight, color=AllSex))+
geom_point(size = 1.2)+
geom_smooth()+
scale_color_manual(values = c("#009E73","#E69F00"), labels = c("Female","Male"))+
labs(color = "Sex")+
ylab("Weight")+
xlab("Precip")+
theme(plot.title = element_text(size = 22),
axis.text.x = element_text(size = 12),
axis.title.x = element_text(size = 14),
axis.text.y = element_text(size = 12),
axis.title.y = element_text(size = 14),
legend.position = "top",
plot.margin = margin(15,15,15,15))
WeightPrecip.plot
#cowplot::save_plot("WeightPrecip.plot.png", WeightPrecip.plot)
BDResids.mdl <- lm(data = B.scaled.df, BillDepth ~ Weight + CalcAge)
BDResidsSex.mdl <- lm(data = B.scaled.df, BillDepth ~ Weight + CalcAge + AllSex)
B.scaled.df$BDResids <- BDResids.mdl$residuals
ggplot(data = B.scaled.df, aes(x=BDResids, fill = AllSex))+
geom_histogram()+
scale_fill_manual(values = c("#009E73","#E69F00"), labels = c("Female","Male"))
t.test(B.scaled.df$BDResids[B.scaled.df$AllSex=="M"],B.scaled.df$BDResids[B.scaled.df$AllSex=="F"])
UBSResids.mdl <- lm(data = B.scaled.df, UBS ~ Weight + CalcAge)
B.scaled.df$UBSResids <- UBSResids.mdl$residuals
ggplot(data = B.scaled.df, aes(x=UBSResids, fill = AllSex))+
geom_histogram()+
scale_fill_manual(values = c("#009E73","#E69F00"), labels = c("Female","Male"))
t.test(B.scaled.df$UBSResids[B.scaled.df$AllSex=="M"],B.scaled.df$UBSResids[B.scaled.df$AllSex=="F"])
BDResidsSex.mdl <- lm(data = B.scaled.df, BillDepth ~ Weight + CalcAge + AllSex)
t.test(B.scaled.df$BDResids[B.scaled.df$AllSex=="M"],B.scaled.df$BDResids[B.scaled.df$AllSex=="F"])
B.scaled.df$BDResidsSex <- BDResidsSex.mdl$residuals
ggplot(data = B.scaled.df, aes(x=BDResidsSex, fill = AllSex))+
geom_histogram()+
scale_fill_manual(values = c("#009E73","#E69F00"), labels = c("Female","Male"))
library(tidyverse)
library(dplyr)
library(broom) #tidy() to create tibbles from model summaries
library(car) #vif
library(cowplot)
library(lme4) #frequentist models
library(sjPlot) #plot_model & tab_model (blue = #377EB8)
library(ggpubr) #ggarrange
library(glmmTMB) #zi & overdispersed models
library(lmerTest) #lmerTest::step
library(ggeffects) #ggpredict
#PACKAGES FOR BAYESIAN MODELS
# library(rstanarm) #stan models
# library(shinystan) #stan model evaluation
#launch_shinystan_demo()
# library(loo) #use loo() to compare fits between bayesian models
library(plotly)
library(MuMIn) #dredge() for unsupervised model selection
library(AICcmodavg) #aictab() for AICc model comparisons
library(DHARMa)
library(DescTools)
theme_set(theme_classic())
df <- read.csv("CrowNestlingClimate.csv", h=TRUE)
df <- df %>%
select(Year,NestName,ID,CalcAge,HatchDateJul,HatchDateJulYear,AllSex,BillNT,BillWidth,BillDepth,TEC,Head,UpperBill,UBillSurface,TotBillSurface,Skull,Tarsus,Weight)
View(df)
df <- read.csv("CrowNestlingClimate.csv", h=TRUE)
df <- df %>%
select(Year,NestName,ID,FieldAge,CalcAge,HatchDateJul,HatchDateJulYear,AllSex,BillNT,BillWidth,BillDepth,TEC,Head,UpperBill,UBillSurface,TotBillSurface,Skull,Tarsus,Weight)
df <- df %>%
rename(BillNT=BNT)
df <- df %>%
rename(BNT=BillNT)
df <- df %>%
select(Year,NestName,ID,AgeField,CalcAge,HatchDateJul,HatchDateJulYear,AllSex,BillNT,BillWidth,BillDepth,TEC,Head,UpperBill,UBillSurface,TotBillSurface,Skull,Tarsus,Weight)
df <- read.csv("CrowNestlingClimate.csv", h=TRUE)
df <- df %>%
select(Year,NestName,ID,AgeField,CalcAge,HatchDateJul,HatchDateJulYear,AllSex,BillNT,BillWidth,BillDepth,TEC,Head,UpperBill,UBillSurface,TotBillSurface,Skull,Tarsus,Weight)
df <- df %>%
rename(BNT=BillNT,BW=BillWidth,BD=BillDepth,UB=UpperBill,UBS=UBillSurface,TBS=TotBillSurface)
df <- df %>%
rename(FieldAge=AgeField,BNT=BillNT,BW=BillWidth,BD=BillDepth,UB=UpperBill,UBS=UBillSurface,TBS=TotBillSurface)
df <- read.csv("CrowNestlingClimate.csv", h=TRUE)
df <- df %>%
select(Year,NestName,ID,AgeField,CalcAge,HatchDateJul,HatchDateJulYear,AllSex,BillNT,BillWidth,BillDepth,TEC,Head,UpperBill,UBillSurface,TotBillSurface,Skull,Tarsus,Weight)
df <- df %>%
rename(FieldAge=AgeField,BNT=BillNT,BW=BillWidth,BD=BillDepth,UB=UpperBill,UBS=UBillSurface,TBS=TotBillSurface)
WeightByFieldAge.plot <- ggplot(data = df, aes(x=FieldAge,y=Weight,label=ID,color=HatchDatJul))+
geom_point()
WeightByFieldAge.plot
WeightByFieldAge.plot <- ggplot(data = df, aes(x=FieldAge,y=Weight,label=ID,color=HatchDateJul))+
geom_point()
WeightByFieldAge.plot
df <- df %>%
drop_na(df)
df <- df %>%
drop_na(Weight)
WeightByFieldAge.plot <- ggplot(data = df, aes(x=FieldAge,y=Weight,label=ID,color=HatchDateJul))+
geom_point()
WeightByFieldAge.plot
df <- read.csv("CrowNestlingClimate.csv", h=TRUE)
df <- df %>%
select(Year,NestName,ID,AgeField,CalcAge,HatchDateJul,HatchDateJulYear,AllSex,BillNT,BillWidth,BillDepth,TEC,Head,UpperBill,UBillSurface,TotBillSurface,Skull,Tarsus,Weight)
df <- df %>%
rename(FieldAge=AgeField,BNT=BillNT,BW=BillWidth,BD=BillDepth,UB=UpperBill,UBS=UBillSurface,TBS=TotBillSurface)
sapply(df, function(x) sum(is.na(x)))
countNAs <- sapply(df, function(x) sum(is.na(x)))
countNAs
df <- df %>%
filter_at(vars(Weight), all_vars(!is.na(.)))
countNAs <- sapply(df, function(x) sum(is.na(x)))
countNAs
df <- df %>%
filter_at(vars(Weight,HatchDateJul), all_vars(!is.na(.)))
countNAs <- sapply(df, function(x) sum(is.na(x)))
countNAs
df <- df %>%
filter_at(vars(Weight,HatchDateJul,BD), all_vars(!is.na(.)))
countNAs <- sapply(df, function(x) sum(is.na(x)))
countNAs
df <- df %>%
filter_at(vars(Weight,HatchDateJul,BD,Tarsus,Skull), all_vars(!is.na(.)))
countNAs <- sapply(df, function(x) sum(is.na(x)))
countNAs
df <- df %>%
filter_at(vars(Weight,HatchDateJul,BD,Tarsus,Skull,BW), all_vars(!is.na(.)))
countNAs <- sapply(df, function(x) sum(is.na(x)))
countNAs
WeightByFieldAge.plot <- ggplot(data = df, aes(x=FieldAge,y=Weight,label=ID,color=HatchDateJul))+
geom_point()
WeightByFieldAge.plot
WeightByFieldAge.plot <- ggplot(data = df, aes(x=FieldAge,y=Weight,label=ID,color=HatchDateJul))+
geom_point()
WeightByFieldAge.plot
ggplotly(WeightByFieldAge.plot)
df <- read.csv("CrowNestlingClimate.csv", h=TRUE)
#Select pertinent variables
df <- df %>%
select(Year,Name,NestName,ID,AgeField,CalcAge,HatchDateJul,HatchDateJulYear,AllSex,BillNT,BillWidth,BillDepth,TEC,Head,UpperBill,UBillSurface,TotBillSurface,Skull,Tarsus,Weight)
#Rename variables
df <- df %>%
rename(FieldAge=AgeField,BNT=BillNT,BW=BillWidth,BD=BillDepth,UB=UpperBill,UBS=UBillSurface,TBS=TotBillSurface)
#Count NAs
countNAs <- sapply(df, function(x) sum(is.na(x)))
countNAs
df <- df %>% filter(!grepl("doa",Name))
WeightByFieldAge.plot <- ggplot(data = df, aes(x=FieldAge,y=Weight,label=ID,color=HatchDateJul))+
geom_point()
ggplotly(WeightByFieldAge.plot)
df <- df %>% filter(!grepl("doa|dead",Name))
WeightByFieldAge.plot <- ggplot(data = df, aes(x=FieldAge,y=Weight,label=ID,color=HatchDateJul))+
geom_point()
ggplotly(WeightByFieldAge.plot)
#filter out Weights < 160
df <- df %>% filter(Weight < 160)
WeightByFieldAge.plot <- ggplot(data = df, aes(x=FieldAge,y=Weight,label=ID,color=HatchDateJul))+
geom_point()
ggplotly(WeightByFieldAge.plot)
df <- read.csv("CrowNestlingClimate.csv", h=TRUE)
#Select variables
df <- df %>%
select(Year,Name,NestName,ID,AgeField,CalcAge,HatchDateJul,HatchDateJulYear,AllSex,BillNT,BillWidth,BillDepth,TEC,Head,UpperBill,UBillSurface,TotBillSurface,Skull,Tarsus,Weight)
#Rename variables
df <- df %>%
rename(FieldAge=AgeField,BNT=BillNT,BW=BillWidth,BD=BillDepth,UB=UpperBill,UBS=UBillSurface,TBS=TotBillSurface)
#Count NAs
countNAs <- sapply(df, function(x) sum(is.na(x)))
countNAs
#Remove NAs
df <- df %>%
filter_at(vars(Weight,HatchDateJul,BD,Tarsus,Skull,BW), all_vars(!is.na(.)))
#Recount NAs
countNAs <- sapply(df, function(x) sum(is.na(x)))
countNAs
#filter out names with 'doa' or 'dead'
df <- df %>% filter(!grepl("doa|dead",Name))
#filter out Weights < 160
df <- df %>% filter(Weight > 160)
WeightByFieldAge.plot <- ggplot(data = df, aes(x=FieldAge,y=Weight,label=ID,color=HatchDateJul))+
geom_point()
ggplotly(WeightByFieldAge.plot)
View(df)
df <- df %>% filter(between(CalcAge, 24,30))
range(df$CalcAge)
range(df$Weight)
range(df$Weight)
ggplot(data = df, aes(x=CalcAge,y=Weight,label=ID))+
geom_point()
WeightByCalcAge.plot <- ggplot(data = df, aes(x=CalcAge,y=Weight,label=ID))+
geom_point()
ggplotly(WeightByCalcAge.plot)
climate.df <- read.csv("ClimateMetrics.csv", h=TRUE)
climate.df <- climate.df[,-c(1,3:4)]
df <- left_join(df,climate.df, by = "HatchDateJulYear")
View(df)
BD.mdl <- lm(data = df, BD ~ GDDSum12_22 * PrecipSum12_22 + Weight + CalcAge)
summary(BD.mdl)
NoScale.df <- df[,1:9]
Scale.df <- df[,10:20]
View(Scale.df)
View(df)
#drop Julian from dataframe
df <- df[,-21]
NoScale.df <- df[,1:9]
Scale.df <- df[,10:35]
scale(Scale.df)
Scale.df <- scale(Scale.df)
scaled.df <- cbind(NoScale.df,Scale.df)
View(scaled.df)
BD.scaled.mdl <- lm(data = scaled.df, BD ~ GDDSum12_22 * PrecipSum12_22 + Weight + CalcAge)
summary(BD.scaled.mdl)
WeightByFieldAge.plot <- ggplot(data = df, aes(x=FieldAge,y=Weight,label=ID,color=HatchDateJul))+
geom_point()
ggplotly(WeightByFieldAge.plot)
View(df)
library(tidyverse)
library(dplyr)
library(zoo)
df <- read.csv("IthacaWeatherData1989_2022.csv", h=TRUE)
df <- read.csv("IthacaWeatherData1989-2022.csv", h=TRUE)
df <- read.csv("IthacaWeatherData1989-2020.csv", h=TRUE)
View(df)
<<<<<<< HEAD
library(tidyverse)
library(dplyr)
library(zoo)
df <- read.csv("IthacaWeatherData1989-2020.csv", h=TRUE)
df <- df %>%
rename(MaxTemp=MaxTemperature,MinTemp=MinTemperature,Precip=Precipitation) %>%
select(Date,HatchDateJulYear,MaxTemp,MinTemp,Precip,HDD,CDD,GDD)
#coerce climate variables to class numeric, NAs introduced where missing data were coded as characters
df$MaxTemp <- as.numeric(df$MaxTemp)
df$MinTemp <- as.numeric(df$MinTemp)
df$Precip <- as.numeric(df$Precip)
df$HDD <- as.numeric(df$HDD)
df$CDD <- as.numeric(df$CDD)
df$GDD <- as.numeric(df$GDD)
#coerce climate variables to class numeric, NAs introduced where missing data were coded as characters
df$MaxTemp <- as.numeric(df$MaxTemp)
df$MinTemp <- as.numeric(df$MinTemp)
df$Precip <- as.numeric(df$Precip)
df$HDD <- as.numeric(df$HDD)
df$CDD <- as.numeric(df$CDD)
df$GDD <- as.numeric(df$GDD)
```{r metric and celcius conversions}
f2c <- function(x){
x <- (5/9) * (x-32)
return(x)
}
f2c(42)#first MaxTemp = 5.555C
df$MaxTempC <- mapply(f2c, df$MaxTemp)
df$MinTempC <- mapply(f2c, df$MinTemp)
in2cm <- function(x){
x <- x * 2.54
return(x)
}
in2cm(0.07)#first precip amount = 0.1778 cm
df$PrecipCM <- mapply(in2cm, df$Precip)
df <- df %>%
select(Date,HatchDateJulYear,MaxTempC,MinTempC,
PrecipCM,HDD,CDD,GDD)
df <- df %>%
select(Date,HatchDateJulYear,MaxTempC,MinTempC,
PrecipCM,HDD,CDD,GDD)
View(df)
#An 11-day rolling window calculates the mean of MaxTemp for the next 11 days
df$MaxTempMean1_11 <- zoo::rollapply(df$MaxTempC, width=11, FUN=mean, align = 'left', fill = NA, partial = TRUE, na.rm = TRUE)
#Code check
c(mean=mean(df[1:11,3]),metric=df[1,9])
#MaxTempMean for days 12-22
df$MaxTempMean12_22 <- dplyr::lead(df$MaxTempMean1_11, n = 11)
#Code check
c(mean=mean(df[12:22,3]), metric=df[1,10])#mean() calculation should match metric
#MaxTemp mean for 19 days prior to hatch date
df$MeanMaxTempIncubation <- zoo::rollapply(df$MaxTempC, width=19, FUN=mean, align = 'right', fill = NA, partial = TRUE, na.rm = TRUE)
#Code check
c(mean=mean(df[1:19,3]), metric=df[19,11]) #mean() calculation should match metric
#An 11-day rolling window calculates the mean of MinTemp for the next 11 days
df$MinTempMean1_11 <- zoo::rollapply(df$MinTempC, width=11, FUN=mean, align = 'left', fill = NA, partial = TRUE, na.rm = TRUE)
#Code check
c(mean=mean(df[1:11,4]),metric=df[1,12])
#MaxTempMean for days 12-22
df$MinTempMean12_22 <- dplyr::lead(df$MinTempMean1_11, n = 11)
#Code check
c(mean=mean(df[12:22,4]), metric=df[1,13])#mean() calculation should match metric
#MaxTemp mean for 19 days prior to hatch date
df$MeanMinTempIncubation <- zoo::rollapply(df$MinTempC, width=19, FUN=mean, align = 'right', fill = NA, partial = TRUE, na.rm = TRUE)
#Code check
c(mean=mean(df[1:19,4]), metric=df[19,14]) #mean() calculation should match metric
df$PrecipSum1_11 <- zoo::rollapply(df$PrecipCM, width=11, FUN=sum, align = 'left', fill = NA, partial = TRUE, na.rm = TRUE)
#Code check
c(sum=sum(df[1:11,5], na.rm = TRUE), metric=df[1,15]) #sum() calculation should match metric
#PrecipSum column that is 11 days ahead
df$PrecipSum12_22 <- dplyr::lead(df$PrecipSum1_11, n = 11)
#Code check
c(sum=sum(df[12:22,5], na.rm = TRUE), metric=df[1,16]) #sum() calculation should match metric
#PrecipSum column that looks back 19 days from hatch date
df$PrecipSumIncubation <- zoo::rollapply(df$PrecipCM, width=19, FUN=sum, align = 'right', fill = NA, partial = TRUE, na.rm = TRUE)
#Code check
c(sum=sum(df[1:19,5], na.rm = TRUE), metric=df[19,17]) #sum() calculation should match metric
#GDDSum column the first 11 days
df$GDDSum1_11 <- zoo::rollapply(df$GDD, width=11, FUN=sum, align = 'left', fill = NA, partial = TRUE, na.rm = TRUE)
#Code check
c(sum=sum(df[112:122,8], na.rm = TRUE), metric=df[112,18]) #sum() calculation should match metric
print(df[112:122,8])
#GDDSum column that is 11 days ahead
df$GDDSum12_22 <- dplyr::lead(df$GDDSum1_11, n = 11)
View(df)
#Code check
c(sum=sum(df[66:76,8], na.rm = TRUE), metric=df[55,19]) #sum() calculation should match metric
print(df[66:76,8])
#GDDSum for the 19 days preceding hatch date
df$GDDSumIncubation <- zoo::rollapply(df$GDD, width=19, FUN=sum, align = 'right', fill = NA, partial = TRUE, na.rm = TRUE)
#code check
c(sum=sum(df[111:129,8], na.rm = TRUE), metric=df[129,20]) #sum() should match metric
print(df[111:129,8])#19 values
#CDDSum column the first 11 days
df$CDDSum1_11 <- zoo::rollapply(df$CDD, width=11, FUN=sum, align = 'left', fill = NA, partial = TRUE, na.rm = TRUE)
#Code check
c(sum=sum(df[112:122,7], na.rm = TRUE), metric=df[112,21]) #sum() calculation should match metric
print(df[112:122,14])#11 values
print(df[112:122,7])#11 values
#CDDSum column that is 11 days ahead
df$CDDSum12_22 <- dplyr::lead(df$CDDSum1_11, n = 11)
#Code check
c(sum=sum(df[66:76,7], na.rm = TRUE), metric=df[55,22]) #sum() calculation should match metric
print(df[66:76,7])
#CDDSum column that is 22 days ahead
df$CDDSum23_33 <- dplyr::lead(df$CDDSum12_22, n = 11)
View(df)
df <- df[,-23]
#CDDSum for the 19 days preceding hatch date
df$CDDSumIncubation <- zoo::rollapply(df$CDD, width=19, FUN=sum, align = 'right', fill = NA, partial = TRUE, na.rm = TRUE)
#code check
c(sum=sum(df[111:129,7], na.rm = TRUE), metric=df[129,23]) #sum() should match metric
print(df[111:129,7])#19 values
#HDDSum column the first 11 days
df$HDDSum1_11 <- zoo::rollapply(df$HDD, width=11, FUN=sum, align = 'left', fill = NA, partial = TRUE, na.rm = TRUE)
View(df)
#Code check
c(sum=sum(df[112:122,6], na.rm = TRUE), metric=df[112,24]) #sum() calculation should match metric
print(df[112:122,6])
#HDDSum column that is 11 days ahead
df$HDDSum12_22 <- dplyr::lead(df$HDDSum1_11, n = 11)
#Code check
c(sum=sum(df[66:76,6], na.rm = TRUE), metric=df[55,25]) #sum() calculation should match metric
#HDDSum for the 19 days preceding hatch date
df$HDDSumIncubation <- zoo::rollapply(df$HDD, width=19, FUN=sum, align = 'right', fill = NA, partial = TRUE, na.rm = TRUE)
#code check
c(sum=sum(df[111:129,6], na.rm = TRUE), metric=df[129,26]) #sum() should match metric
write.csv(df, "ClimateMetricsFull.csv", row.names = FALSE)
#New dataframe with the derived climate metrics
ClimateMetrics.df <- df %>%
select(Date,HatchDateJulYear,
MaxTempMean1_11,MaxTempMean12_22,MeanMaxTempIncubation,
MinTempMean1_11,MinTempMean12_22,MeanMinTempIncubation,
PrecipSum1_11,PrecipSum12_22,PrecipSumIncubation,
GDDSum1_11,GDDSum12_22,GDDSumIncubation,
CDDSum1_11,CDDSum12_22,CDDSumIncubation,
HDDSum1_11,HDDSum12_22,HDDSumIncubation)
View(ClimateMetrics.df)
write.csv(ClimateMetrics.df, "ClimateMetrics.csv",
row.names = FALSE)
library(tidyverse)
library(dplyr)
library(broom) #tidy() to create tibbles from model summaries
library(car) #vif
library(cowplot)
library(lme4) #frequentist models
library(sjPlot) #plot_model & tab_model (blue = #377EB8)
library(ggpubr) #ggarrange
library(glmmTMB) #zi & overdispersed models
library(lmerTest) #lmerTest::step
library(ggeffects) #ggpredict
#PACKAGES FOR BAYESIAN MODELS
# library(rstanarm) #stan models
# library(shinystan) #stan model evaluation
#launch_shinystan_demo()
# library(loo) #use loo() to compare fits between bayesian models
library(plotly)
library(MuMIn) #dredge() for unsupervised model selection
library(AICcmodavg) #aictab() for AICc model comparisons
library(DHARMa)
library(DescTools)
theme_set(theme_classic())
df <- read.csv("CrowNestlingClimate.csv", h=TRUE)
#Select variables
df <- df %>%
select(Year,Name,NestName,ID,AgeField,CalcAge,HatchDateJul,HatchDateJulYear,AllSex,BillNT,BillWidth,BillDepth,TEC,Head,UpperBill,UBillSurface,TotBillSurface,Skull,Tarsus,Weight)
#Rename variables
df <- df %>%
rename(FieldAge=AgeField,BNT=BillNT,BW=BillWidth,BD=BillDepth,UB=UpperBill,UBS=UBillSurface,TBS=TotBillSurface)
View(df)
#Count NAs
countNAs <- sapply(df, function(x) sum(is.na(x)))
countNAs
#Remove NAs
df <- df %>%
filter_at(vars(Weight,HatchDateJul,BD,Tarsus,Skull,BW), all_vars(!is.na(.)))
#Recount NAs
countNAs <- sapply(df, function(x) sum(is.na(x)))
countNAs
#filter out names with 'doa' or 'dead'
df <- df %>% filter(!grepl("doa|dead",Name))
#filter out Weights < 160
df <- df %>% filter(Weight > 160)
range(df$Weight)
df <- df %>% filter(between(CalcAge, 24,30))
range(df$CalcAge)
WeightByCalcAge.plot <- ggplot(data = df, aes(x=CalcAge,y=Weight,label=ID))+
geom_point()
ggplotly(WeightByCalcAge.plot)
climate.df <- read.csv("ClimateMetrics.csv", h=TRUE)
View(climate.df)
df <- left_join(df,climate.df, by = "HatchDateJulYear")
View(df)
write.csv(df, "AllNestlingsClimateJoined.csv")
#variables that don't get scaled
DataNotScaled.df <- df[,1:9]
#Numerical data that do get scaled
DataToScale.df <- df[,10:39]
#Scale those data
Scaled.df <- scale(DataToScale.df)
#Numerical data that do get scaled
DataToScale.df <- df[,10:39]
#Scale those data
Scaled.df <- scale(DataToScale.df)
is.na(DataToScale.df)
count(is.na(DataToScale.df))
sum(is.na(DataToScale.df))
#Scale those data
Scaled.df <- scale(DataToScale.df)
summary(DataToScale.df)
View(df)
df %>% relocate(Date, .before = AllSex)
write.csv(df, "AllNestlingsClimateJoined.csv")
df <- df %>% relocate(Date, .before = AllSex)
write.csv(df, "AllNestlingsClimateJoined.csv")
#variables that don't get scaled
DataNotScaled.df <- df[,1:10]
#Numerical data that do get scaled
DataToScale.df <- df[,11:39]
#Scale those data
Scaled.df <- scale(DataToScale.df)
#Rejoin with variables that don't get scaled
scaled.df <- cbind(DataNotScaled.df,Scaled.df)
BD.scaled.mdl <- lm(data = scaled.df, BD ~ GDDSum12_22 * PrecipSum12_22 + Weight + CalcAge)
summary(BD.scaled.mdl)
=======
=======
>>>>>>> ee18c6c79fc6452194cc2957ff6a2c543fd46c0f
>>>>>>> fcb1e7b78be935a078ec7e02aba222a5352dbe60
>>>>>>> d51fafc0b7b9c2f2622737c5b7269ad2056891e7
>>>>>>> 746cf944c1645d9a6082d8e3a3b7470ab10ef657
